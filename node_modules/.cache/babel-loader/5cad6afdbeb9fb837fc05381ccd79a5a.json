{"ast":null,"code":"var _jsxFileName = \"/Users/tungdo/pathfinder/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Component } from 'react';\nimport { NavDropdown, Navbar, Container, Nav } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/* TODO: \n- add a diagonalCheck \n- update dijsktra to be weighted (check if diagonal )\n- write A* (write heuristic straight line function, maybe write a sub function to calculate coordinates) \n- add maze generator \n- \n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Element extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) {\n      var current_element = document.getElementById(this.props.id);\n\n      if (this.props.condition == \"default\") {\n        current_element.style.background = '#FFFFFF';\n      } else if (this.props.condition == \"block\") {\n        current_element.style.background = \"#000000\";\n      } else if (this.props.condition == \"considered-d\") {\n        current_element.style.background = \"#FFB266\";\n      } else if (this.props.condition == \"considered\") {\n        current_element.style.background = \"#FF8000\";\n      } else if (this.props.condition == \"endpoint\") {\n        current_element.style.background = \"#FF99FF\";\n      } else if (this.props.condition == \"chosen\") {\n        current_element.style.background = \"#80FF00\";\n      }\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      id: this.props.id,\n      condition: this.props.condition,\n      onClick: this.props.changecond,\n      children: \"  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\n;\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.changeInitialCondition = this.changeInitialCondition.bind(this);\n    this.addNodeToGraph = this.addNodeToGraph.bind(this);\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this);\n    this.resetExceptEndPoints = this.resetExceptEndPoints.bind(this);\n    this.reset = this.reset.bind(this);\n    this.resetHelper = this.resetHelper.bind(this);\n    this.BFS = this.BFS.bind(this);\n    this.dijkstra = this.dijkstra.bind(this);\n    this.notVertical = this.notVertical.bind(this);\n    this.findCoordinates = this.findCoordinates.bind(this);\n    this.findDistance = this.findDistance.bind(this);\n    this.deleteNodeFromGraph = this.deleteNodeFromGraph.bind(this);\n    this.generateMazePrimHelper = this.generateMazePrimHelper.bind(this);\n    this.generateMazeRandomHelper = this.generateMazeRandomHelper.bind(this);\n    this.generateMazeRandom = this.generateMazeRandom.bind(this);\n    this.generateMazePrim = this.generateMazePrim.bind(this);\n    this.restoreEndpoints = this.restoreEndpoints.bind(this);\n    this.state = {\n      adjacency_list: {},\n      endpoints: [],\n      conditions: {}\n    };\n\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\";\n    }\n\n    ;\n    /* TODO: initialize adjacency_list */\n\n    var new_adjacency_list = {};\n    var first_row = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n    var last_row = [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399];\n    var first_col = [21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361];\n    var last_col = [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380];\n\n    for (let i = 1; i <= 400; i++) {\n      if (i == 1) {\n        new_adjacency_list[1] = [2, 21, 22];\n      } else if (i == 20) {\n        new_adjacency_list[20] = [19, 39, 40];\n      } else if (i == 381) {\n        new_adjacency_list[381] = [361, 362, 382];\n      } else if (i == 400) {\n        new_adjacency_list[400] = [379, 380, 399];\n      } else if (first_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i + 20, i + 19, i + 21];\n      } else if (last_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 20, i - 19, i - 21];\n      } else if (first_col.includes(i)) {\n        new_adjacency_list[i] = [i - 20, i + 20, i + 1, i - 19, i + 21];\n      } else if (last_col.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i - 21, i + 20, i + 19, i - 20];\n      } else {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n      }\n    }\n\n    ; //this.state.adjacency_list = new_adjacency_list;\n\n    this.state.adjacency_list = new_adjacency_list;\n  }\n\n  notVertical(i, j) {\n    var vertical_candidates = [i - 1, i + 1, i - 20, i + 20];\n\n    if (vertical_candidates.includes(j)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  findCoordinates(i) {\n    var x_coordinate = i % 20;\n    var y_coordinate = Math.floor(i / 20) + 1;\n    return [x_coordinate, y_coordinate];\n  }\n\n  findDistance(i, j) {\n    var i_coordinate = this.findCoordinates(i);\n    var j_coordinate = this.findCoordinates(j);\n    var distance = Math.sqrt(Math.pow(i_coordinate[0] - j_coordinate[0], 2) + Math.pow(i_coordinate[1] - j_coordinate[2], 2));\n    return distance;\n  }\n\n  changeInitialCondition(i) {\n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list;\n\n    if (this.state.conditions[i] == \"default\") {\n      new_conditions[i] = \"endpoint\";\n      new_endpoints.push(i);\n    } else if (this.state.conditions[i] == \"endpoint\") {\n      new_conditions[i] = \"block\";\n      new_endpoints.splice(new_endpoints.indexOf(i), 1);\n      new_adjacency_list = this.deleteNodeFromGraph(i);\n    } else if (this.state.conditions[i] == \"block\") {\n      new_conditions[i] = \"default\";\n      new_adjacency_list = this.addNodeToGraph(i);\n    }\n\n    this.setState(state => ({\n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list\n    }));\n  }\n\n  deleteNodeFromGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list;\n    new_adjacency_list[i] = [];\n    var candidates = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n\n    for (var j = 0; j < candidates.length; j++) {\n      if (candidates[j] in new_adjacency_list) {\n        if (new_adjacency_list[candidates[j]].includes(i)) {\n          new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1);\n        }\n      }\n    }\n\n    return new_adjacency_list;\n  }\n\n  addNodeToGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list;\n    var first_row = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n    var last_row = [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399];\n    var first_col = [21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361];\n    var last_col = [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380];\n\n    if (i == 1) {\n      new_adjacency_list[1] = [2, 21, 22];\n    } else if (i == 20) {\n      new_adjacency_list[20] = [19, 39, 40];\n    } else if (i == 381) {\n      new_adjacency_list[381] = [361, 362, 382];\n    } else if (i == 400) {\n      new_adjacency_list[400] = [379, 380, 399];\n    } else if (first_row.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i + 1, i + 20, i + 19, i + 21];\n    } else if (last_row.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i + 1, i - 20, i - 19, i - 21];\n    } else if (first_col.includes(i)) {\n      new_adjacency_list[i] = [i - 20, i + 20, i + 1, i - 19, i + 21];\n    } else if (last_col.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i - 21, i + 20, i + 19, i - 20];\n    } else {\n      new_adjacency_list[i] = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n    }\n\n    for (let k = 0; k < new_adjacency_list[i].length; k++) {\n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n\n    return new_adjacency_list;\n  }\n\n  changeTraverseCondition(i, new_status) {\n    var new_conditions = this.state.conditions;\n    var new_adjacency_list = this.state.adjacency_list;\n    var new_endpoints = this.state.endpoints;\n    new_conditions[i] = new_status;\n    this.setState(state => ({\n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list\n    }));\n  }\n\n  resetExceptEndPoints() {\n    var new_conditions = this.state.conditions;\n    var new_adjacency_list = this.state.adjacency_list;\n    var new_endpoints = this.state.endpoints;\n\n    for (let i = 1; i <= 400; i++) {\n      if (!new_endpoints.includes(i) && new_conditions[i] != \"block\") {\n        new_conditions[i] = \"default\";\n      } else if (new_endpoints.includes(i)) {\n        new_conditions[i] = \"endpoint\";\n      }\n    }\n\n    ;\n    this.setState(state => ({\n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list\n    }));\n  }\n\n  restoreEndpoints() {\n    var new_conditions = this.state.conditions;\n\n    for (let i = 0; i < this.state.endpoints.length; i++) {\n      new_conditions[this.state.endpoints[i]] = \"endpoint\";\n    }\n\n    ;\n    this.setState(state => ({\n      conditions: new_conditions\n    }));\n  }\n\n  resetHelper() {\n    var new_conditions = [];\n    var new_endpoints = [];\n    var new_adjacency_list = {};\n    var first_row = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n    var last_row = [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399];\n    var first_col = [21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361];\n    var last_col = [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380];\n\n    for (let i = 1; i <= 400; i++) {\n      if (i == 1) {\n        new_adjacency_list[1] = [2, 21, 22];\n      } else if (i == 20) {\n        new_adjacency_list[20] = [19, 39, 40];\n      } else if (i == 381) {\n        new_adjacency_list[381] = [361, 362, 382];\n      } else if (i == 400) {\n        new_adjacency_list[400] = [379, 380, 399];\n      } else if (first_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i + 20, i + 19, i + 21];\n      } else if (last_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 20, i - 19, i - 21];\n      } else if (first_col.includes(i)) {\n        new_adjacency_list[i] = [i - 20, i + 20, i + 1, i - 19, i + 21];\n      } else if (last_col.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i - 21, i + 20, i + 19, i - 20];\n      } else {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n      }\n    }\n\n    ;\n\n    for (let i = 1; i <= 400; i++) {\n      new_conditions[i] = \"default\";\n    }\n\n    ;\n    return [new_conditions, new_endpoints, new_adjacency_list];\n  }\n\n  reset() {\n    this.setState(state => ({\n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2]\n    }));\n  }\n\n  generateMazeRandom() {\n    this.setState(state => ({\n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2]\n    }), this.generateMazeRandomHelper);\n  }\n\n  generateMazePrim() {\n    this.setState(state => ({\n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2]\n    }), this.generateMazePrimHelper);\n  }\n\n  generateMazeRandomHelper() {\n    var block_nodes = [];\n    var new_conditions = this.state.conditions;\n    var number_blocks = Math.floor(Math.random() * 50 + 50);\n\n    for (let i = 0; i < number_blocks; i++) {\n      var random_elem = Math.floor(Math.random() * 400 + 1);\n\n      while (new_conditions[random_elem] != \"default\") {\n        random_elem = Math.floor(Math.random() * 400 + 1);\n      }\n\n      new_conditions[random_elem] = \"block\";\n      block_nodes.push(random_elem);\n    }\n\n    this.setState(state => ({\n      conditions: new_conditions\n    }));\n\n    for (let i = 0; i < block_nodes.length; i++) {\n      this.setState({\n        adjacency_list: this.deleteNodeFromGraph(block_nodes[i])\n      });\n    }\n  }\n\n  generateMazePrimHelper() {\n    var new_conditions = this.state.conditions;\n    var original_graph = this.state.adjacency_list;\n    var explored = {};\n    var cell_list = [];\n\n    for (let i = 1; i <= 400; i++) {\n      new_conditions[i] = \"block\";\n    }\n\n    var first_elem = Math.floor(Math.random() * 400 + 1);\n    new_conditions[first_elem] = \"default\";\n    explored[1] = true;\n\n    for (let j = 0; j < original_graph[1].length; j++) {\n      cell_list.push(original_graph[1][j]);\n    }\n\n    var building_blocks = setInterval(function () {\n      if (cell_list.length == 0) {\n        console.log(\"here\");\n        clearInterval(building_blocks);\n\n        for (let i = 1; i <= 400; i++) {\n          if (!(i in explored)) {\n            this.setState(state => ({\n              adjacency_list: this.deleteNodeFromGraph(i)\n            }));\n          }\n        }\n\n        return;\n      }\n\n      var current_node = cell_list[Math.floor(Math.random() * cell_list.length)];\n      console.log(current_node);\n      var neighbors = original_graph[current_node];\n      var nums_explored = 0;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (neighbors[i] in explored) {\n          nums_explored += 1;\n        }\n      }\n\n      if (nums_explored < 2) {\n        explored[current_node] = true;\n        new_conditions[current_node] = \"default\";\n\n        for (let j = 0; j < original_graph[current_node].length; j++) {\n          if (!(original_graph[current_node][j] in explored)) {\n            cell_list.push(original_graph[current_node][j]);\n          }\n        }\n      }\n\n      cell_list.splice(cell_list.indexOf(current_node), 1);\n      this.setState(state => ({\n        conditions: new_conditions\n      }));\n    }.bind(this), 0.001);\n  }\n\n  BFS() {\n    this.resetExceptEndPoints();\n\n    if (this.state.endpoints.length != 2) {\n      return;\n    }\n\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var queue = [start_node];\n    var visited = {};\n    visited[start_node] = true;\n    var new_queue = [];\n    var parents = {};\n    var considering_intervals = setInterval(function () {\n      if (queue.length == 0 || target_node in visited) {\n        clearInterval(considering_intervals);\n\n        if (target_node in visited) {\n          var current_node = target_node;\n          var getting_path = setInterval(function () {\n            if (current_node == start_node) {\n              this.changeTraverseCondition(current_node, \"chosen\");\n              clearInterval(getting_path);\n              this.restoreEndpoints();\n              return;\n            }\n\n            this.changeTraverseCondition(current_node, \"chosen\");\n            current_node = parents[current_node];\n          }.bind(this), 300);\n        }\n\n        return;\n      }\n\n      new_queue = [];\n\n      for (let i = 0; i < queue.length; i++) {\n        for (let j = 0; j < graph[queue[i]].length; j++) {\n          if (!(graph[queue[i]][j] in visited)) {\n            parents[graph[queue[i]][j]] = queue[i];\n            new_queue.push(graph[queue[i]][j]);\n            visited[graph[queue[i]][j]] = true;\n          }\n        }\n      }\n\n      queue = new_queue;\n\n      for (let k = 0; k < queue.length; k++) {\n        if (this.state.conditions[queue[k]] != \"endpoint\") {\n          this.changeTraverseCondition(queue[k], \"considered\");\n        }\n      }\n    }.bind(this), 400);\n  }\n\n  dijkstra() {\n    this.resetExceptEndPoints();\n\n    if (this.state.endpoints.length != 2) {\n      return;\n    }\n\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var distances = [1000];\n    var visited = {};\n    var parents = {};\n\n    for (let i = 1; i <= 400; i++) {\n      if (i == start_node) {\n        distances.push(0);\n      } else {\n        distances.push(1000);\n      }\n    }\n\n    var current_min_distance = 0;\n    var current_min_node = start_node;\n    var considering_nodes = setInterval(function () {\n      if (!this.state.endpoints.includes(current_min_node)) {\n        this.changeTraverseCondition(current_min_node, \"considered\");\n      }\n\n      if (target_node in visited || current_min_distance == 1000) {\n        clearInterval(considering_nodes);\n        var current_node = target_node;\n        var getting_path = setInterval(function () {\n          if (current_node == start_node) {\n            this.changeTraverseCondition(current_node, \"chosen\");\n            this.restoreEndpoints();\n            clearInterval(getting_path);\n            return;\n          }\n\n          this.changeTraverseCondition(current_node, \"chosen\");\n          current_node = parents[current_node];\n        }.bind(this), 300);\n        return;\n      }\n\n      var current_distances = {};\n\n      for (let j = 0; j < graph[current_min_node].length; j++) {\n        if (!(graph[current_min_node][j] in visited)) {\n          if (this.notVertical(current_min_node, graph[current_min_node][j])) {\n            current_distances[graph[current_min_node][j]] = current_min_distance + 1.4;\n          } else {\n            current_distances[graph[current_min_node][j]] = current_min_distance + 1;\n          }\n        }\n      }\n\n      Object.keys(current_distances).forEach(function (key) {\n        if (current_distances[key] < distances[key]) {\n          distances[key] = current_distances[key];\n          parents[key] = current_min_node;\n\n          if (!this.state.endpoints.includes(parseInt(key))) {\n            this.changeTraverseCondition(key, \"considered-d\");\n          }\n        }\n      }, this);\n      distances[current_min_node] = 1000;\n      visited[current_min_node] = true;\n      current_min_distance = Math.min.apply(Math, distances);\n      current_min_node = distances.indexOf(current_min_distance);\n    }.bind(this), 40);\n  }\n\n  renderElement(i) {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      id: i,\n      condition: this.state.conditions[i],\n      changecond: () => this.changeInitialCondition(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderElements(start) {\n    var elements = [];\n\n    for (let i = 20 * (start - 1) + 1; i <= 20 * start; i++) {\n      elements.push(this.renderElement(i));\n    }\n\n    return elements;\n  }\n\n  renderBoard() {\n    var board = [];\n\n    for (let i = 1; i <= 20; i++) {\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        style: {\n          marginLeft: \"400px\"\n        },\n        children: [\" \", this.renderElements(i), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 18\n      }, this));\n    }\n\n    return board;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        bg: \"dark\",\n        variant: \"dark\",\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n            children: \" Pathfinding Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Nav, {\n            className: \"me-auto\",\n            children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n              href: \"#home\",\n              children: \" Tutorial \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n              title: \"Run Pathfinding Algorithms\",\n              id: \"basic-nav-dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                onClick: this.BFS,\n                children: \"Breadth First Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                onClick: this.dijkstra,\n                children: \" Dijkstra's Algorithm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n              title: \"Generate Maze\",\n              id: \"basic-nav-dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                onClick: this.generateMazePrim,\n                children: \" Randomized Prim's Algorithm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                onClick: this.generateMazeRandom,\n                children: \" Just a random maze\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n              onClick: this.reset,\n              children: \" Reset Board \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            width: \"700px\"\n          },\n          children: \" Click on a grid to make it a start/end grid. We need two grids to run path finding algorithms. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            width: \"500px\"\n          },\n          children: \" Click twice on a grid to make it an obstacle. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            width: \"500px\"\n          },\n          children: \" Click three times on a grid to reset it to the original grid. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"1000px\",\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#FF99FF\"\n          },\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"legend\",\n          children: \" Start/end grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#000000\"\n          },\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"legend\",\n          children: \" Obstacle grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#FF8000\"\n          },\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"legend\",\n          children: \" Explored grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#FFB266\"\n          },\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"legend\",\n          children: \" Soon-to-be-explored grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#80FF00\"\n          },\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"legend\",\n          children: \" Shortest-path grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 60\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 7\n      }, this), this.renderBoard()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Graph, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 572,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tungdo/pathfinder/src/App.js"],"names":["Component","NavDropdown","Navbar","Container","Nav","Element","constructor","props","componentDidUpdate","prevProps","condition","current_element","document","getElementById","id","style","background","render","changecond","Graph","changeInitialCondition","bind","addNodeToGraph","changeTraverseCondition","resetExceptEndPoints","reset","resetHelper","BFS","dijkstra","notVertical","findCoordinates","findDistance","deleteNodeFromGraph","generateMazePrimHelper","generateMazeRandomHelper","generateMazeRandom","generateMazePrim","restoreEndpoints","state","adjacency_list","endpoints","conditions","i","new_adjacency_list","first_row","last_row","first_col","last_col","includes","j","vertical_candidates","x_coordinate","y_coordinate","Math","floor","i_coordinate","j_coordinate","distance","sqrt","pow","new_conditions","new_endpoints","push","splice","indexOf","setState","candidates","length","k","element_need_i","new_status","block_nodes","number_blocks","random","random_elem","original_graph","explored","cell_list","first_elem","building_blocks","setInterval","console","log","clearInterval","current_node","neighbors","nums_explored","start_node","target_node","graph","queue","visited","new_queue","parents","considering_intervals","getting_path","distances","current_min_distance","current_min_node","considering_nodes","current_distances","Object","keys","forEach","key","parseInt","min","apply","renderElement","renderElements","start","elements","renderBoard","board","marginLeft","marginBottom","marginRight","width","App"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport {NavDropdown, Navbar, Container, Nav} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n /* TODO: \n- add a diagonalCheck \n- update dijsktra to be weighted (check if diagonal )\n- write A* (write heuristic straight line function, maybe write a sub function to calculate coordinates) \n- add maze generator \n- \n */\nclass Element extends Component { \n  constructor(props) {\n    super(props);\n  };\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) { \n      var current_element = document.getElementById(this.props.id);\n      if (this.props.condition == \"default\") { \n        current_element.style.background = '#FFFFFF';\n      }\n      else if (this.props.condition == \"block\") { \n        current_element.style.background = \"#000000\";\n      }\n      else if (this.props.condition == \"considered-d\") { \n        current_element.style.background = \"#FFB266\"\n      }\n      else if (this.props.condition == \"considered\") { \n        current_element.style.background = \"#FF8000\";\n      }\n      else if (this.props.condition == \"endpoint\") { \n        current_element.style.background = \"#FF99FF\";\n      }\n      else if (this.props.condition == \"chosen\") { \n        current_element.style.background = \"#80FF00\";\n      }\n    }; \n  };\n  render() { \n    return <button className=\"square\" id = {this.props.id} condition = {this.props.condition} onClick = {this.props.changecond}>  </button>;\n  };\n};\nclass Graph extends Component { \n  constructor(props) { \n    super(props); \n    this.changeInitialCondition = this.changeInitialCondition.bind(this);\n    this.addNodeToGraph = this.addNodeToGraph.bind(this);\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this);\n    this.resetExceptEndPoints = this.resetExceptEndPoints.bind(this); \n    this.reset = this.reset.bind(this); \n    this.resetHelper = this.resetHelper.bind(this); \n    this.BFS = this.BFS.bind(this);\n    this.dijkstra = this.dijkstra.bind(this);\n    this.notVertical = this.notVertical.bind(this)\n    this.findCoordinates = this.findCoordinates.bind(this)\n    this.findDistance = this.findDistance.bind(this)\n    this.deleteNodeFromGraph = this.deleteNodeFromGraph.bind(this)\n    this.generateMazePrimHelper = this.generateMazePrimHelper.bind(this)\n    this.generateMazeRandomHelper = this.generateMazeRandomHelper.bind(this)\n    this.generateMazeRandom = this.generateMazeRandom.bind(this)\n    this.generateMazePrim = this.generateMazePrim.bind(this)\n    this.restoreEndpoints = this.restoreEndpoints.bind(this)\n    this.state = { \n      adjacency_list: {},\n      endpoints:[], \n      conditions:{}, \n    };\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\"; \n    };\n    /* TODO: initialize adjacency_list */\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    //this.state.adjacency_list = new_adjacency_list;\n    this.state.adjacency_list = new_adjacency_list\n  };\n\n  notVertical(i, j) { \n    var vertical_candidates = [i-1, i+1, i-20, i+20]\n    if (vertical_candidates.includes(j)) { \n      return false; \n    }\n    else { \n      return true;  \n    }\n  }\n\n  findCoordinates(i) { \n    var x_coordinate = i%20; \n    var y_coordinate = Math.floor(i/20) + 1; \n    return [x_coordinate, y_coordinate]; \n  }\n\n  findDistance(i, j) { \n    var i_coordinate = this.findCoordinates(i); \n    var j_coordinate = this.findCoordinates(j);\n    var distance = Math.sqrt(Math.pow((i_coordinate[0] - j_coordinate[0]),2) + Math.pow(i_coordinate[1] - j_coordinate[2], 2))\n    return distance \n  }\n\n  changeInitialCondition(i) { \n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list; \n    if (this.state.conditions[i] == \"default\") { \n      new_conditions[i] = \"endpoint\"; \n      new_endpoints.push(i) \n    }\n    else if (this.state.conditions[i] == \"endpoint\") { \n      new_conditions[i] = \"block\"; \n      new_endpoints.splice(new_endpoints.indexOf(i), 1); \n      new_adjacency_list = this.deleteNodeFromGraph(i);\n    }\n    else if (this.state.conditions[i] == \"block\") { \n      new_conditions[i] = \"default\"; \n      new_adjacency_list = this.addNodeToGraph(i)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }; \n\n  deleteNodeFromGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list; \n    new_adjacency_list[i] = [];\n    var candidates = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    for (var j=0; j < candidates.length; j++) { \n      if (candidates[j] in new_adjacency_list) { \n        if (new_adjacency_list[candidates[j]].includes(i)) { \n          new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1); \n        }\n      }\n    }\n    return new_adjacency_list;  \n  }\n\n  addNodeToGraph(i) { \n    var new_adjacency_list = this.state.adjacency_list; \n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399];\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361];\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380];\n    if (i == 1) { \n      new_adjacency_list[1] = [2,21, 22];\n    }\n    else if (i == 20) { \n      new_adjacency_list[20] = [19,39,40];\n    }\n    else if (i == 381) { \n      new_adjacency_list[381] = [361,362,382];\n    }\n    else if (i == 400) { \n      new_adjacency_list[400] = [379, 380, 399];\n    }\n    else if (first_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21];\n    }\n    else if (last_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21];\n    }\n    else if (first_col.includes(i)) { \n      new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21];\n    }\n    else if (last_col.includes(i)) { \n      new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20];\n    }\n    else { \n      new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    }\n    for (let k=0; k < new_adjacency_list[i].length; k++) { \n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n    return new_adjacency_list; \n  };\n\n  changeTraverseCondition(i, new_status) { \n    var new_conditions = this.state.conditions; \n    var new_adjacency_list = this.state.adjacency_list; \n    var new_endpoints = this.state.endpoints\n    new_conditions[i] = new_status; \n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  resetExceptEndPoints() { \n    var new_conditions = this.state.conditions \n    var new_adjacency_list = this.state.adjacency_list\n    var new_endpoints = this.state.endpoints\n    for (let i = 1; i <= 400; i++) {\n      if (!(new_endpoints.includes(i)) && new_conditions[i] != \"block\") {\n        new_conditions[i] = \"default\";\n      } \n      else if (new_endpoints.includes(i)) { \n        new_conditions[i] = \"endpoint\"; \n      }\n    };\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  restoreEndpoints() { \n    var new_conditions = this.state.conditions\n    for (let i = 0; i < this.state.endpoints.length; i++) { \n      new_conditions[this.state.endpoints[i]] = \"endpoint\"\n    }; \n    this.setState(state => ({ \n      conditions: new_conditions \n    }))\n  }\n\n  resetHelper() { \n    var new_conditions = []\n    var new_endpoints = []\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    for (let i = 1; i <= 400; i++) {\n      new_conditions[i] = \"default\"; \n    };\n    return [new_conditions, new_endpoints, new_adjacency_list]\n  }\n\n  reset() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    })); \n  }\n\n  generateMazeRandom() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazeRandomHelper); \n  }\n  generateMazePrim() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazePrimHelper); \n  }\n\n  generateMazeRandomHelper() { \n    var block_nodes = []\n    var new_conditions = this.state.conditions; \n    var number_blocks = Math.floor(Math.random()*50 + 50) \n    for (let i = 0; i < number_blocks; i++) { \n      var random_elem = Math.floor(Math.random()*400 + 1) \n      while (new_conditions[random_elem] != \"default\") { \n        random_elem = Math.floor(Math.random()*400 + 1) \n      }\n      new_conditions[random_elem] = \"block\"\n      block_nodes.push(random_elem)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions\n    }))\n    for (let i=0; i < block_nodes.length; i++) { \n      this.setState({ \n        adjacency_list: this.deleteNodeFromGraph(block_nodes[i])\n      })\n    }\n  }\n\n  generateMazePrimHelper() { \n    var new_conditions = this.state.conditions; \n    var original_graph = this.state.adjacency_list; \n    var explored = {}\n    var cell_list = [] \n    for (let i=1; i <= 400; i++) { \n      new_conditions[i] = \"block\";\n    }\n    var first_elem = Math.floor(Math.random() * 400 + 1); \n    new_conditions[first_elem] = \"default\"; \n    explored[1] = true \n    for (let j=0; j < original_graph[1].length; j++) { \n      cell_list.push(original_graph[1][j]); \n    }\n    var building_blocks = setInterval(function() { \n      if (cell_list.length == 0) { \n        console.log(\"here\")\n        clearInterval(building_blocks); \n        for (let i = 1; i <= 400; i++) { \n          if (!(i in explored)) { \n            this.setState(state => ({ \n              adjacency_list: this.deleteNodeFromGraph(i)\n            }))\n          }\n        }\n        return \n      }\n      var current_node = cell_list[Math.floor(Math.random()*cell_list.length)]; \n      console.log(current_node)\n      var neighbors = original_graph[current_node]; \n      var nums_explored = 0 \n      for (let i=0; i < neighbors.length; i++) { \n        if (neighbors[i] in explored) { \n          nums_explored += 1\n        }\n      }\n      if (nums_explored < 2) { \n        explored[current_node] = true \n        new_conditions[current_node] = \"default\" \n        for (let j=0; j < original_graph[current_node].length; j++) { \n          if (!(original_graph[current_node][j] in explored)) { \n            cell_list.push(original_graph[current_node][j]); \n          }\n        }\n      }\n      cell_list.splice(cell_list.indexOf(current_node), 1); \n      this.setState(state => ({ \n        conditions: new_conditions,\n      })); \n    }.bind(this), 0.001)\n  }\n\n  BFS() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var queue = [start_node]; \n    var visited = {};\n    visited[start_node] = true; \n    var new_queue = [];\n    var parents = {};\n    var considering_intervals = setInterval(function(){\n        if (queue.length == 0 || target_node in visited) { \n          clearInterval(considering_intervals);\n          if (target_node in visited) { \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path); \n                this.restoreEndpoints(); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n          }\n          return \n        }\n        new_queue = [];  \n        for (let i = 0; i < queue.length; i++) { \n            for (let j = 0; j < graph[queue[i]].length; j++) { \n                if (!(graph[queue[i]][j] in visited)) { \n                    parents[graph[queue[i]][j]] = queue[i];\n                    new_queue.push(graph[queue[i]][j]);\n                    visited[graph[queue[i]][j]] = true;\n                }\n            }\n        }\n        queue = new_queue; \n        for (let k = 0; k < queue.length; k++) { \n            if (this.state.conditions[queue[k]] != \"endpoint\") { \n            this.changeTraverseCondition(queue[k], \"considered\");\n            }\n          }\n        }.bind(this), 400)\n  }\n\n  dijkstra() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var distances = [1000]\n    var visited = {}\n    var parents = {}\n    for (let i=1; i <= 400;i++) { \n        if (i == start_node) { \n            distances.push(0)\n        }\n        else { \n            distances.push(1000)\n        }\n    } \n    var current_min_distance = 0 \n    var current_min_node = start_node\n    var considering_nodes = setInterval(function() { \n        if (!(this.state.endpoints.includes(current_min_node))) { \n          this.changeTraverseCondition(current_min_node, \"considered\")\n        }\n        if ((target_node in visited) || current_min_distance == 1000) { \n            clearInterval(considering_nodes); \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                this.restoreEndpoints(); \n                clearInterval(getting_path); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n            return \n        }\n        var current_distances = {}\n        for (let j=0; j < graph[current_min_node].length; j++) { \n            if (!(graph[current_min_node][j] in visited)) { \n              if (this.notVertical(current_min_node, graph[current_min_node][j])) { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1.4 \n              }\n              else { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1 \n              }\n        }\n        }\n        Object.keys(current_distances).forEach(function(key) { \n            if (current_distances[key] < distances[key]) { \n                distances[key] = current_distances[key]\n                parents[key] = current_min_node\n                if (!(this.state.endpoints.includes(parseInt(key)))) { \n                  this.changeTraverseCondition(key, \"considered-d\")\n                }\n            }\n        }, this)\n        distances[current_min_node] = 1000\n        visited[current_min_node] = true\n        current_min_distance = Math.min.apply(Math, distances);\n        current_min_node = distances.indexOf(current_min_distance);\n\n    }.bind(this), 40)\n  };\n\n  renderElement(i) { \n    return <Element id={i} condition={this.state.conditions[i]} changecond={() => this.changeInitialCondition(i)}/>\n  }\n\n  renderElements(start) { \n    var elements = []; \n    for (let i = 20*(start-1) + 1; i <= 20*start; i++) { \n      elements.push(this.renderElement(i)); \n    }\n    return elements\n  }\n\n  renderBoard() { \n    var board = []; \n    for (let i = 1; i <= 20; i++) { \n      board.push(<div className = \"board-row\" style={{marginLeft: \"400px\"}}> {this.renderElements(i)}  </div>); \n    }\n    return board\n  }\n\n  render() { \n    return (\n      <div> \n      <Navbar bg=\"dark\" variant=\"dark\" style={{marginBottom: \"15px\"}}>\n        <Container>\n        <Navbar.Brand> Pathfinding Visualizer</Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <Nav.Link href=\"#home\"> Tutorial </Nav.Link>\n          <NavDropdown title=\"Run Pathfinding Algorithms\" id=\"basic-nav-dropdown\"> \n          <NavDropdown.Item onClick = {this.BFS}>Breadth First Search</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.dijkstra}> Dijkstra's Algorithm</NavDropdown.Item>\n          </NavDropdown>\n          <NavDropdown title=\"Generate Maze\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item onClick = {this.generateMazePrim}> Randomized Prim's Algorithm</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.generateMazeRandom}> Just a random maze</NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link onClick = {this.reset}> Reset Board </Nav.Link>\n        </Nav>\n        </Container>\n      </Navbar>\n      <div  style = {{marginBottom: \"10px\"}}> \n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"700px\"}}> Click on a grid to make it a start/end grid. We need two grids to run path finding algorithms. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click twice on a grid to make it an obstacle. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click three times on a grid to reset it to the original grid. </div>\n      </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"1000px\", marginBottom: \"15px\"}}> \n      <button style = {{background: \"#FF99FF\"}}> </button> <span class =\"legend\"> Start/end grid</span>\n      <button style = {{background: \"#000000\"}}> </button> <span class =\"legend\"> Obstacle grid</span>\n      <button style = {{background: \"#FF8000\"}}> </button> <span class =\"legend\"> Explored grid</span>\n      <button style = {{background: \"#FFB266\"}}> </button> <span class =\"legend\"> Soon-to-be-explored grid</span>\n      <button style = {{background: \"#80FF00\"}}> </button> <span class =\"legend\"> Shortest-path grid</span>\n       </div>\n      {this.renderBoard()}\n      </div>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Graph/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}