{"ast":null,"code":"var _jsxFileName = \"/Users/tungdo/pathfinder/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Element extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) {\n      var current_element = document.getElementById(this.props.id);\n\n      if (this.props.condition == \"default\") {\n        current_element.style.background = '#FFFFFF';\n      } else if (this.props.condition == \"block\") {\n        current_element.style.background = \"#000000\";\n      } else if (this.props.condition == \"considered-d\") {\n        current_element.style.background = \"#FFB266\";\n      } else if (this.props.condition == \"considered\") {\n        current_element.style.background = \"#FF8000\";\n      } else if (this.props.condition == \"endpoint\") {\n        current_element.style.background = \"#33FFFF\";\n      } else if (this.props.condition == \"chosen\") {\n        current_element.style.background = \"#00FF00\";\n      }\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      id: this.props.id,\n      condition: this.props.condition,\n      onClick: this.props.changecond,\n      children: [\" \", this.props.id, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\n;\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.BFS = () => {\n      var start_node = this.state.endpoints[0];\n      var target_node = this.state.endpoints[1];\n      var graph = this.state.adjacency_list;\n      var queue = [start_node];\n      var visited = {};\n      visited[start_node] = true;\n      var new_queue = [];\n      var parents = {};\n      var considering_intervals = setInterval(function () {\n        if (queue.length == 0 || target_node in visited) {\n          clearInterval(considering_intervals);\n\n          if (target_node in visited) {\n            var current_node = target_node;\n            var getting_path = setInterval(function () {\n              if (current_node == start_node) {\n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path);\n                return;\n              }\n\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node];\n            }.bind(this), 300);\n          }\n\n          return;\n        }\n\n        console.log(visited);\n        new_queue = [];\n\n        for (let i = 0; i < queue.length; i++) {\n          for (let j = 0; j < graph[queue[i]].length; j++) {\n            if (!(graph[queue[i]][j] in visited)) {\n              parents[graph[queue[i]][j]] = queue[i];\n              new_queue.push(graph[queue[i]][j]);\n              visited[graph[queue[i]][j]] = true;\n            }\n          }\n        }\n\n        queue = new_queue;\n        console.log(queue);\n\n        for (let k = 0; k < queue.length; k++) {\n          if (this.state.conditions[queue[k]] != \"endpoint\") {\n            this.changeTraverseCondition(queue[k], \"considered\");\n          }\n        }\n      }.bind(this), 300);\n    };\n\n    this.dijkstra = () => {\n      var start_node = this.state.endpoints[0];\n      var target_node = this.state.endpoints[1];\n      var graph = this.state.adjacency_list;\n      var distances = [1000];\n      var visited = {};\n      var parents = {};\n\n      for (let i = 1; i <= 400; i++) {\n        if (i == start_node) {\n          distances.push(0);\n        } else {\n          distances.push(1000);\n        }\n      }\n\n      var current_min_distance = 0;\n      var current_min_node = start_node;\n      var considering_nodes = setInterval(function () {\n        this.changeTraverseCondition(current_min_node, \"considered\");\n\n        if (target_node in visited || current_min_distance == 1000) {\n          clearInterval(considering_nodes);\n          var current_node = target_node;\n          var getting_path = setInterval(function () {\n            if (current_node == start_node) {\n              this.changeTraverseCondition(current_node, \"chosen\");\n              clearInterval(getting_path);\n              return;\n            }\n\n            this.changeTraverseCondition(current_node, \"chosen\");\n            current_node = parents[current_node];\n          }.bind(this), 300);\n          return;\n        }\n\n        var current_distances = {};\n\n        for (let j = 0; j < graph[current_min_node].length; j++) {\n          if (!(graph[current_min_node][j] in visited)) {\n            current_distances[graph[current_min_node][j]] = current_min_distance + 1;\n          }\n        }\n\n        Object.keys(current_distances).forEach(function (key) {\n          if (current_distances[key] < distances[key]) {\n            distances[key] = current_distances[key];\n            parents[key] = current_min_node;\n            this.changeTraverseCondition(key, \"considered-d\");\n          }\n        });\n        distances[current_min_node] = 1000;\n        visited[current_min_node] = true;\n        current_min_distance = Math.min.apply(Math, distances);\n        current_min_node = distances.indexOf(current_min_distance);\n      }.bind(this), 100);\n    };\n\n    this.state = {\n      adjacency_list: {},\n      endpoints: [],\n      conditions: {}\n    };\n    this.changeInitialCondition = this.changeInitialCondition.bind(this);\n    this.updateGraph = this.updateGraph.bind(this);\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this);\n\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\";\n    }\n\n    ;\n    /* TODO: initialize adjacency_list */\n\n    var new_adjacency_list = {};\n    var first_row = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n    var last_row = [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399];\n    var first_col = [21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361];\n    var last_col = [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380];\n\n    for (let i = 1; i <= 400; i++) {\n      if (i == 1) {\n        new_adjacency_list[1] = [2, 21, 22];\n      } else if (i == 20) {\n        new_adjacency_list[20] = [19, 39, 40];\n      } else if (i == 381) {\n        new_adjacency_list[381] = [361, 362, 382];\n      } else if (i == 400) {\n        new_adjacency_list[400] = [379, 380, 399];\n      } else if (first_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i + 20, i + 19, i + 21];\n      } else if (last_row.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 20, i - 19, i - 21];\n      } else if (first_col.includes(i)) {\n        new_adjacency_list[i] = [i - 20, i + 20, i + 1, i - 19, i + 21];\n      } else if (last_col.includes(i)) {\n        new_adjacency_list[i] = [i - 1, i - 21, i + 20, i + 19, i - 20];\n      } else {\n        new_adjacency_list[i] = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n      }\n    }\n\n    ; //this.state.adjacency_list = new_adjacency_list;\n\n    this.state.adjacency_list = new_adjacency_list;\n  }\n\n  changeInitialCondition(i) {\n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list;\n\n    if (this.state.conditions[i] == \"default\") {\n      new_conditions[i] = \"endpoint\";\n      new_endpoints.push(i);\n    } else if (this.state.conditions[i] == \"endpoint\") {\n      new_conditions[i] = \"block\";\n      new_endpoints.splice(new_endpoints.indexOf(i), 1);\n      new_adjacency_list[i] = [];\n      var candidates = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n\n      for (var j = 0; j < candidates.length; j++) {\n        if (candidates[j] in new_adjacency_list) {\n          if (new_adjacency_list[candidates[j]].includes(i)) {\n            new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1);\n          }\n        }\n      }\n    } else if (this.state.conditions[i] == \"block\") {\n      new_conditions[i] = \"default\";\n      new_adjacency_list = this.updateGraph(i);\n    }\n\n    this.setState(state => ({\n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list\n    }));\n  }\n\n  updateGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list;\n    var first_row = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n    var last_row = [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399];\n    var first_col = [21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361];\n    var last_col = [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380];\n\n    if (i == 1) {\n      new_adjacency_list[1] = [2, 21, 22];\n    } else if (i == 20) {\n      new_adjacency_list[20] = [19, 39, 40];\n    } else if (i == 381) {\n      new_adjacency_list[381] = [361, 362, 382];\n    } else if (i == 400) {\n      new_adjacency_list[400] = [379, 380, 399];\n    } else if (first_row.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i + 1, i + 20, i + 19, i + 21];\n    } else if (last_row.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i + 1, i - 20, i - 19, i - 21];\n    } else if (first_col.includes(i)) {\n      new_adjacency_list[i] = [i - 20, i + 20, i + 1, i - 19, i + 21];\n    } else if (last_col.includes(i)) {\n      new_adjacency_list[i] = [i - 1, i - 21, i + 20, i + 19, i - 20];\n    } else {\n      new_adjacency_list[i] = [i - 1, i + 1, i - 19, i - 20, i - 21, i + 19, i + 20, i + 21];\n    }\n\n    for (let k = 0; k < new_adjacency_list[i].length; k++) {\n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n\n    return new_adjacency_list;\n  }\n\n  changeTraverseCondition(i, new_status) {\n    var new_conditions = this.state.conditions;\n    var new_adjacency_list = this.state.adjacency_list;\n    var new_endpoints = this.state.endpoints;\n    new_conditions[i] = new_status;\n    this.setState(state => ({\n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list\n    }));\n  }\n\n  renderElement(i) {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      id: i,\n      condition: this.state.conditions[i],\n      changecond: () => this.changeInitialCondition(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderElements(start) {\n    var elements = [];\n\n    for (let i = 20 * (start - 1) + 1; i <= 20 * start; i++) {\n      elements.push(this.renderElement(i));\n    }\n\n    return elements;\n  }\n\n  renderBoard() {\n    var board = [];\n\n    for (let i = 1; i <= 20; i++) {\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        style: {\n          margin: '0'\n        },\n        children: [\" \", this.renderElements(i), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 18\n      }, this));\n    }\n\n    return board;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.renderBoard(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.BFS,\n        children: \" Breadth First Search \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.BFS,\n        children: \" Breadth First Search \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Graph, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tungdo/pathfinder/src/App.js"],"names":["Component","Element","constructor","props","componentDidUpdate","prevProps","condition","current_element","document","getElementById","id","style","background","render","changecond","Graph","BFS","start_node","state","endpoints","target_node","graph","adjacency_list","queue","visited","new_queue","parents","considering_intervals","setInterval","length","clearInterval","current_node","getting_path","changeTraverseCondition","bind","console","log","i","j","push","k","conditions","dijkstra","distances","current_min_distance","current_min_node","considering_nodes","current_distances","Object","keys","forEach","key","Math","min","apply","indexOf","changeInitialCondition","updateGraph","new_adjacency_list","first_row","last_row","first_col","last_col","includes","new_conditions","new_endpoints","splice","candidates","setState","element_need_i","new_status","renderElement","renderElements","start","elements","renderBoard","board","margin","App"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\n\nclass Element extends Component { \n  constructor(props) {\n    super(props);\n  };\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) { \n      var current_element = document.getElementById(this.props.id);\n      if (this.props.condition == \"default\") { \n        current_element.style.background = '#FFFFFF';\n      }\n      else if (this.props.condition == \"block\") { \n        current_element.style.background = \"#000000\";\n      }\n      else if (this.props.condition == \"considered-d\") { \n        current_element.style.background = \"#FFB266\"\n      }\n      else if (this.props.condition == \"considered\") { \n        current_element.style.background = \"#FF8000\";\n      }\n      else if (this.props.condition == \"endpoint\") { \n        current_element.style.background = \"#33FFFF\";\n      }\n      else if (this.props.condition == \"chosen\") { \n        current_element.style.background = \"#00FF00\";\n      }\n    }; \n  };\n  render() { \n    return <button className=\"square\" id = {this.props.id} condition = {this.props.condition} onClick = {this.props.changecond}> {this.props.id} </button>;\n  };\n};\n\nclass Graph extends Component { \n  constructor(props) { \n    super(props); \n    this.state = { \n      adjacency_list: {},\n      endpoints:[], \n      conditions:{}, \n    };\n    this.changeInitialCondition = this.changeInitialCondition.bind(this)\n    this.updateGraph = this.updateGraph.bind(this)\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this)\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\"; \n    };\n    /* TODO: initialize adjacency_list */\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    //this.state.adjacency_list = new_adjacency_list;\n    this.state.adjacency_list = new_adjacency_list\n  };\n\n  changeInitialCondition(i) { \n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list; \n    if (this.state.conditions[i] == \"default\") { \n      new_conditions[i] = \"endpoint\"; \n      new_endpoints.push(i) \n    }\n    else if (this.state.conditions[i] == \"endpoint\") { \n      new_conditions[i] = \"block\"; \n      new_endpoints.splice(new_endpoints.indexOf(i), 1); \n      new_adjacency_list[i] = []\n      var candidates = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      for (var j=0; j < candidates.length; j++) { \n        if (candidates[j] in new_adjacency_list) { \n          if (new_adjacency_list[candidates[j]].includes(i)) { \n            new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1); \n          }\n        }\n      }\n    }\n    else if (this.state.conditions[i] == \"block\") { \n      new_conditions[i] = \"default\"; \n      new_adjacency_list = this.updateGraph(i)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }; \n\n  updateGraph(i) { \n    var new_adjacency_list = this.state.adjacency_list; \n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399];\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361];\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380];\n    if (i == 1) { \n      new_adjacency_list[1] = [2,21, 22];\n    }\n    else if (i == 20) { \n      new_adjacency_list[20] = [19,39,40];\n    }\n    else if (i == 381) { \n      new_adjacency_list[381] = [361,362,382];\n    }\n    else if (i == 400) { \n      new_adjacency_list[400] = [379, 380, 399];\n    }\n    else if (first_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21];\n    }\n    else if (last_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21];\n    }\n    else if (first_col.includes(i)) { \n      new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21];\n    }\n    else if (last_col.includes(i)) { \n      new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20];\n    }\n    else { \n      new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    }\n    for (let k=0; k < new_adjacency_list[i].length; k++) { \n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n    return new_adjacency_list; \n  };\n\n  changeTraverseCondition(i, new_status) { \n    var new_conditions = this.state.conditions; \n    var new_adjacency_list = this.state.adjacency_list; \n    var new_endpoints = this.state.endpoints\n    new_conditions[i] = new_status; \n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  \n  BFS = () => { \n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var queue = [start_node]; \n    var visited = {};\n    visited[start_node] = true; \n    var new_queue = [];\n    var parents = {};\n    var considering_intervals = setInterval(function(){\n        if (queue.length == 0 || target_node in visited) { \n          clearInterval(considering_intervals);\n          if (target_node in visited) { \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n          }\n          return \n        }\n        console.log(visited)\n        new_queue = [];  \n        for (let i = 0; i < queue.length; i++) { \n            for (let j = 0; j < graph[queue[i]].length; j++) { \n                if (!(graph[queue[i]][j] in visited)) { \n                    parents[graph[queue[i]][j]] = queue[i];\n                    new_queue.push(graph[queue[i]][j]);\n                    visited[graph[queue[i]][j]] = true;\n                }\n            }\n        }\n        queue = new_queue; \n        console.log(queue); \n        for (let k = 0; k < queue.length; k++) { \n            if (this.state.conditions[queue[k]] != \"endpoint\") { \n            this.changeTraverseCondition(queue[k], \"considered\");\n            }\n          }\n        }.bind(this), 300)\n  }\n\n  dijkstra = () => { \n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var distances = [1000]\n    var visited = {}\n    var parents = {}\n    for (let i=1; i <= 400;i++) { \n        if (i == start_node) { \n            distances.push(0)\n        }\n        else { \n            distances.push(1000)\n        }\n    } \n    var current_min_distance = 0 \n    var current_min_node = start_node\n    var considering_nodes = setInterval(function() { \n        this.changeTraverseCondition(current_min_node, \"considered\")\n        if ((target_node in visited) || current_min_distance == 1000) { \n            clearInterval(considering_nodes); \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n            return \n        }\n        var current_distances = {}\n        for (let j=0; j < graph[current_min_node].length; j++) { \n            if (!(graph[current_min_node][j] in visited)) { \n            current_distances[graph[current_min_node][j]] = current_min_distance + 1 \n        }\n        }\n        Object.keys(current_distances).forEach(function(key) { \n            if (current_distances[key] < distances[key]) { \n                distances[key] = current_distances[key]\n                parents[key] = current_min_node\n                this.changeTraverseCondition(key, \"considered-d\")\n            }\n        })\n        distances[current_min_node] = 1000\n        visited[current_min_node] = true\n        current_min_distance = Math.min.apply(Math, distances);\n        current_min_node = distances.indexOf(current_min_distance);\n    }.bind(this), 100)\n  }\n  renderElement(i) { \n    return <Element id={i} condition={this.state.conditions[i]} changecond={() => this.changeInitialCondition(i)}/>\n  }\n\n  renderElements(start) { \n    var elements = []; \n    for (let i = 20*(start-1) + 1; i <= 20*start; i++) { \n      elements.push(this.renderElement(i)); \n    }\n    return elements\n  }\n\n  renderBoard() { \n    var board = []; \n    for (let i = 1; i <= 20; i++) { \n      board.push(<div className = \"board-row\" style= {{margin: '0'}}> {this.renderElements(i)}  </div>); \n    }\n    return board\n  }\n\n  render() { \n    return (\n      <div> \n      {this.renderBoard()}\n      <button onClick = {this.BFS}> Breadth First Search </button>\n      <button onClick = {this.BFS}> Breadth First Search </button>\n      </div>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Graph/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}