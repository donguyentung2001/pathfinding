{"version":3,"sources":["logo.svg","pic1.png","pic2.png","pic4.png","pic5.png","pic6.png","pic7.png","App.js","reportWebVitals.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","TutorialPopUp","props","state","tutorialOn","handleClose","bind","prevProps","this","showTutorial","setState","Modal","show","style","onHide","Header","display","justifyContent","alignItems","Title","Body","src","pic1","alt","width","height","pic2","pic4","pic5","pic6","pic7","Footer","Button","variant","onClick","Component","NotEnoughNodesPopUp","warningOn","showWarning","AlgorithmPopUp","algorithmOn","showAlgorithm","Element","condition","current_element","document","getElementById","id","background","className","changecond","Graph","changeInitialCondition","addNodeToGraph","changeTraverseCondition","resetExceptEndPoints","reset","resetHelper","BFS","dijkstra","notVertical","findCoordinates","findDistance","deleteNodeFromGraph","generateMazePrimHelper","generateMazeRandomHelper","generateMazeRandom","generateMazePrim","restoreEndpoints","getSumArray","a_star","adjacency_list","endpoints","conditions","tutorialIsOpen","warningIsOn","algorithmIsOn","i","new_adjacency_list","first_row","last_row","first_col","last_col","includes","j","Math","floor","i_coordinate","j_coordinate","sqrt","pow","arr","count","length","new_conditions","new_endpoints","push","splice","indexOf","candidates","k","new_status","block_nodes","number_blocks","random","random_elem","original_graph","explored","cell_list","first_elem","building_blocks","setInterval","current_node","neighbors","nums_explored","clearInterval","start_node","target_node","graph","queue","visited","new_queue","parents","considering_intervals","getting_path","distances","current_min_distance","current_min_node","considering_nodes","current_distances","Object","keys","forEach","key","parseInt","min","apply","to_be_visited","start_cost","heuristic_cost","next_node","entries","value","start","elements","renderElement","board","marginLeft","renderElements","Navbar","sticky","bg","marginBottom","Container","Brand","Nav","Link","NavDropdown","title","Item","class","renderBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1b334f38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/pic1.6a988925.png\";","export default __webpack_public_path__ + \"static/media/pic2.5c986050.png\";","export default __webpack_public_path__ + \"static/media/pic4.f20d2566.png\";","export default __webpack_public_path__ + \"static/media/pic5.9c12f257.png\";","export default __webpack_public_path__ + \"static/media/pic6.706839af.png\";","export default __webpack_public_path__ + \"static/media/pic7.db9632b4.png\";","import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport {NavDropdown, Navbar, Container, Nav, Modal, Button} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom'\nimport pic1 from './pic1.png'\nimport pic2 from './pic2.png'\nimport pic4 from './pic4.png'\nimport pic5 from './pic5.png'\nimport pic6 from './pic6.png'\nimport pic7 from './pic7.png'\n\n /* TODO: \n-  add A* search \n */\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nclass TutorialPopUp extends Component { \n  constructor(props) { \n    super(props); \n    this.state = { \n      tutorialOn: true\n    }\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  componentDidUpdate(prevProps) { \n    if (this.props.showTutorial != prevProps.showTutorial) { \n      this.setState(state => ({ \n        tutorialOn: true \n      }))\n    }\n  }\n\n  handleClose() { \n    this.setState(state => ({ \n      tutorialOn: false \n    }))\n  }\n\n  render() { \n    return (\n      <div> \n      <Modal show = {this.state.tutorialOn} style={customStyles} onHide = {this.handleClose} > \n      <Modal.Header\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n      <Modal.Title> \n      Tutorial\n      </Modal.Title>\n      </Modal.Header>          \n      <Modal.Body> \n      <p> For a quick start, click on two grids. </p>\n       <img src = {pic1} alt=\"two grids\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> Then, click on \"Run Pathfinding Algorithms\" and choose an algorithm you want to find the shortest path with</p>\n       <img src = {pic2} alt=\"run pathfinding algorithms\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> Now you can see how the algorithms find the shortest path between two grids! </p>\n       <img src = {pic4} alt=\"shortest path\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> Click twice on a grid to make it an obstacle. </p>\n       <img src = {pic5} alt=\"obstacle\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> You can also choose to quickly build a maze, aka placing obstacles \"smartly\", from one of the maze generation algorithms by clicking on \"Generate Maze\" and choose one algorithm. </p>\n       <img src = {pic6} alt=\"maze\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> Now you can watch how our algorithm builds a maze! You can put two start/end grids on this new maze and run the pathfinding algorithm as well! </p>\n       <img src = {pic7} alt=\"maze-run\" style = {{width:\"400px\", height:\"200px\"}}/>\n       <p> Finally, to reset our board, click on \"Reset board\" on the nagivation bar. </p>\n       <p> Enjoy pathfinding! </p>\n       </Modal.Body>\n       <Modal.Footer style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}>\n          <Button variant=\"primary\" style = {{width: \"70px\", height: \"50px\"}} onClick={this.handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </div>\n    )\n  }\n}\n\nclass NotEnoughNodesPopUp extends Component { \n  constructor(props) { \n    super(props); \n    this.state = { \n      warningOn: false \n    }\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  componentDidUpdate(prevProps) { \n    if (this.props.showWarning != prevProps.showWarning) { \n      this.setState(state => ({ \n        warningOn: true \n      }))\n    }\n  }\n\n  handleClose() { \n    this.setState(state => ({ \n      warningOn: false \n    }))\n  }\n\n  render() { \n    return (\n      <div> \n      <Modal show = {this.state.warningOn} style={customStyles} onHide = {this.handleClose} > \n      <Modal.Header\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n      <Modal.Title> \n      Warning \n      </Modal.Title>\n      </Modal.Header>          \n      <Modal.Body> \n      <p> You need exactly 2 start/end grids.  </p>\n       </Modal.Body>\n       <Modal.Footer style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}>\n          <Button variant=\"primary\" style = {{width: \"70px\", height: \"50px\"}} onClick={this.handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </div>\n    )\n  }\n}\n\nclass AlgorithmPopUp extends Component { \n  constructor(props) { \n    super(props); \n    this.state = { \n      algorithmOn: false \n    }\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  componentDidUpdate(prevProps) { \n    if (this.props.showAlgorithm != prevProps.showAlgorithm) { \n      this.setState(state => ({ \n        algorithmOn: true \n      }))\n    }\n  }\n\n  handleClose() { \n    this.setState(state => ({ \n      algorithmOn: false \n    }))\n  }\n\n  render() { \n    return (\n      <div> \n      <Modal show = {this.state.algorithmOn} style={customStyles} onHide = {this.handleClose} > \n      <Modal.Header\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n      <Modal.Title> \n      About our algorithms \n      </Modal.Title>\n      </Modal.Header>          \n      <Modal.Body> \n      <h3> Grid setup </h3>\n      <p> A single grid is connected to all of its adjacent grids (vertically, horizontally, diagonally), unless the adjacent grid is an obstacle. </p>\n      <p> For path-finding algorithm of weighted graphs, we let the distance between a grid and its vertical and horizontal neighbors to be 1,\n      and the distance between a grid and its diagonal neighbor to be 1.4. </p>\n      <h3> Algorithm </h3>\n      <p> Breadth-first search is <b> unweighted </b> and guarantees shortest path.  </p>\n      <p> Dijkstra's algorithm is <b> weighted </b> and guarantees shortest path.  </p>\n      <p> A* search algorithm is <b> weighted </b> and guarantees shortest path.  </p>\n       </Modal.Body>\n       <Modal.Footer style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}>\n          <Button variant=\"primary\" style = {{width: \"70px\", height: \"50px\"}} onClick={this.handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </div>\n    )\n  }\n}\nclass Element extends Component { \n  constructor(props) {\n    super(props);\n  };\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) { \n      var current_element = document.getElementById(this.props.id);\n      if (this.props.condition == \"default\") { \n        current_element.style.background = '#FFFFFF';\n      }\n      else if (this.props.condition == \"block\") { \n        current_element.style.background = \"#000000\";\n      }\n      else if (this.props.condition == \"considered-d\") { \n        current_element.style.background = \"#FFB266\"\n      }\n      else if (this.props.condition == \"considered\") { \n        current_element.style.background = \"#FF8000\";\n      }\n      else if (this.props.condition == \"endpoint\") { \n        current_element.style.background = \"#FF99FF\";\n      }\n      else if (this.props.condition == \"chosen\") { \n        current_element.style.background = \"#80FF00\";\n      }\n    }; \n  };\n  render() { \n    return <button className=\"square\" id = {this.props.id} condition = {this.props.condition} onClick = {this.props.changecond}>  </button>;\n  };\n};\nclass Graph extends Component { \n  constructor(props) { \n    super(props); \n    this.changeInitialCondition = this.changeInitialCondition.bind(this);\n    this.addNodeToGraph = this.addNodeToGraph.bind(this);\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this);\n    this.resetExceptEndPoints = this.resetExceptEndPoints.bind(this); \n    this.reset = this.reset.bind(this); \n    this.resetHelper = this.resetHelper.bind(this); \n    this.BFS = this.BFS.bind(this);\n    this.dijkstra = this.dijkstra.bind(this);\n    this.notVertical = this.notVertical.bind(this)\n    this.findCoordinates = this.findCoordinates.bind(this)\n    this.findDistance = this.findDistance.bind(this)\n    this.deleteNodeFromGraph = this.deleteNodeFromGraph.bind(this)\n    this.generateMazePrimHelper = this.generateMazePrimHelper.bind(this)\n    this.generateMazeRandomHelper = this.generateMazeRandomHelper.bind(this)\n    this.generateMazeRandom = this.generateMazeRandom.bind(this)\n    this.generateMazePrim = this.generateMazePrim.bind(this)\n    this.restoreEndpoints = this.restoreEndpoints.bind(this)\n    this.showTutorial = this.showTutorial.bind(this)\n    this.showWarning = this.showWarning.bind(this)\n    this.showAlgorithm = this.showAlgorithm.bind(this)\n    this.getSumArray = this.getSumArray.bind(this)\n    this.a_star = this.a_star.bind(this)\n    this.state = { \n      adjacency_list: {},\n      endpoints:[], \n      conditions:{}, \n      tutorialIsOpen: false, \n      warningIsOn: false, \n      algorithmIsOn: false, \n    };\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\"; \n    };\n    /* TODO: initialize adjacency_list */\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    //this.state.adjacency_list = new_adjacency_list;\n    this.state.adjacency_list = new_adjacency_list\n  };\n\n  showTutorial() {   \n    this.setState({ \n      tutorialIsOpen: !this.state.tutorialIsOpen\n    })\n  }\n\n  showWarning() { \n    this.setState({ \n      warningIsOn: !this.state.warningIsOn \n    })\n  }\n\n  showAlgorithm() { \n    this.setState({ \n      algorithmIsOn: !this.state.algorithmIsOn\n    })\n  }\n\n  notVertical(i, j) { \n    var vertical_candidates = [i-1, i+1, i-20, i+20]\n    if (vertical_candidates.includes(j)) { \n      return false; \n    }\n    else { \n      return true;  \n    }\n  }\n\n  findCoordinates(i) { \n    var x_coordinate = (i-1)%20; \n    var y_coordinate = Math.floor(((i-1)/20));\n    return [x_coordinate, y_coordinate]; \n  }\n\n  findDistance(i, j) { \n    var i_coordinate = this.findCoordinates(i); \n    var j_coordinate = this.findCoordinates(j);\n    var distance = Math.sqrt(Math.pow((i_coordinate[0] - j_coordinate[0]),2) + Math.pow(i_coordinate[1] - j_coordinate[1], 2))\n    return distance \n  }\n\n  getSumArray(arr) { \n    var count = 0;\n   for (let i=0; i < arr.length; i++) \n    { \n      count += arr[i]; \n    }\n    return count \n  }\n\n  changeInitialCondition(i) { \n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list; \n    if (this.state.conditions[i] == \"default\") { \n      new_conditions[i] = \"endpoint\"; \n      new_endpoints.push(i) \n    }\n    else if (this.state.conditions[i] == \"endpoint\") { \n      new_conditions[i] = \"block\"; \n      new_endpoints.splice(new_endpoints.indexOf(i), 1); \n      new_adjacency_list = this.deleteNodeFromGraph(i);\n    }\n    else if (this.state.conditions[i] == \"block\") { \n      new_conditions[i] = \"default\"; \n      new_adjacency_list = this.addNodeToGraph(i)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }; \n\n  deleteNodeFromGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list; \n    new_adjacency_list[i] = [];\n    var candidates = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    for (var j=0; j < candidates.length; j++) { \n      if (candidates[j] in new_adjacency_list) { \n        if (new_adjacency_list[candidates[j]].includes(i)) { \n          new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1); \n        }\n      }\n    }\n    return new_adjacency_list;  \n  }\n\n  addNodeToGraph(i) { \n    var new_adjacency_list = this.state.adjacency_list; \n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399];\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361];\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380];\n    if (i == 1) { \n      new_adjacency_list[1] = [2,21, 22];\n    }\n    else if (i == 20) { \n      new_adjacency_list[20] = [19,39,40];\n    }\n    else if (i == 381) { \n      new_adjacency_list[381] = [361,362,382];\n    }\n    else if (i == 400) { \n      new_adjacency_list[400] = [379, 380, 399];\n    }\n    else if (first_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21];\n    }\n    else if (last_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21];\n    }\n    else if (first_col.includes(i)) { \n      new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21];\n    }\n    else if (last_col.includes(i)) { \n      new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20];\n    }\n    else { \n      new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    }\n    for (let k=0; k < new_adjacency_list[i].length; k++) { \n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n    return new_adjacency_list; \n  };\n\n  changeTraverseCondition(i, new_status) { \n    var new_conditions = this.state.conditions; \n    var new_adjacency_list = this.state.adjacency_list; \n    var new_endpoints = this.state.endpoints\n    new_conditions[i] = new_status; \n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  resetExceptEndPoints() { \n    var new_conditions = this.state.conditions \n    var new_adjacency_list = this.state.adjacency_list\n    var new_endpoints = this.state.endpoints\n    for (let i = 1; i <= 400; i++) {\n      if (!(new_endpoints.includes(i)) && new_conditions[i] != \"block\") {\n        new_conditions[i] = \"default\";\n      } \n      else if (new_endpoints.includes(i)) { \n        new_conditions[i] = \"endpoint\"; \n      }\n    };\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  restoreEndpoints() { \n    var new_conditions = this.state.conditions\n    for (let i = 0; i < this.state.endpoints.length; i++) { \n      new_conditions[this.state.endpoints[i]] = \"endpoint\"\n    }; \n    this.setState(state => ({ \n      conditions: new_conditions \n    }))\n  }\n\n  resetHelper() { \n    var new_conditions = []\n    var new_endpoints = []\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    for (let i = 1; i <= 400; i++) {\n      new_conditions[i] = \"default\"; \n    };\n    return [new_conditions, new_endpoints, new_adjacency_list]\n  }\n\n  reset() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    })); \n  }\n\n  generateMazeRandom() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazeRandomHelper); \n  }\n  generateMazePrim() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazePrimHelper); \n  }\n\n  generateMazeRandomHelper() { \n    var block_nodes = []\n    var new_conditions = this.state.conditions; \n    var number_blocks = Math.floor(Math.random()*50 + 50) \n    for (let i = 0; i < number_blocks; i++) { \n      var random_elem = Math.floor(Math.random()*400 + 1) \n      while (new_conditions[random_elem] != \"default\") { \n        random_elem = Math.floor(Math.random()*400 + 1) \n      }\n      new_conditions[random_elem] = \"block\"\n      block_nodes.push(random_elem)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions\n    }))\n    for (let i=0; i < block_nodes.length; i++) { \n      this.setState({ \n        adjacency_list: this.deleteNodeFromGraph(block_nodes[i])\n      })\n    }\n  }\n\n  generateMazePrimHelper() { \n    var new_conditions = this.state.conditions; \n    var original_graph = this.state.adjacency_list; \n    var explored = {}\n    var cell_list = [] \n    for (let i=1; i <= 400; i++) { \n      new_conditions[i] = \"block\";\n    }\n    var first_elem = Math.floor(Math.random() * 400 + 1); \n    new_conditions[first_elem] = \"default\"; \n    explored[1] = true \n    for (let j=0; j < original_graph[1].length; j++) { \n      cell_list.push(original_graph[1][j]); \n    }\n    var building_blocks = setInterval(function() { \n      if (cell_list.length == 0) { \n        clearInterval(building_blocks); \n        for (let i = 1; i <= 400; i++) { \n          if (!(i in explored)) { \n            this.setState(state => ({ \n              adjacency_list: this.deleteNodeFromGraph(i)\n            }))\n          }\n        }\n        return \n      }\n      var current_node = cell_list[Math.floor(Math.random()*cell_list.length)]; \n      var neighbors = original_graph[current_node]; \n      var nums_explored = 0 \n      for (let i=0; i < neighbors.length; i++) { \n        if (neighbors[i] in explored) { \n          nums_explored += 1\n        }\n      }\n      if (nums_explored < 2) { \n        explored[current_node] = true \n        new_conditions[current_node] = \"default\" \n        for (let j=0; j < original_graph[current_node].length; j++) { \n          if (!(original_graph[current_node][j] in explored)) { \n            cell_list.push(original_graph[current_node][j]); \n          }\n        }\n      }\n      cell_list.splice(cell_list.indexOf(current_node), 1); \n      this.setState(state => ({ \n        conditions: new_conditions,\n      })); \n    }.bind(this), 0.001)\n  }\n\n  BFS() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      this.showWarning(); \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var queue = [start_node]; \n    var visited = {};\n    visited[start_node] = true; \n    var new_queue = [];\n    var parents = {};\n    var considering_intervals = setInterval(function(){\n        if (queue.length == 0 || target_node in visited) { \n          clearInterval(considering_intervals);\n          if (target_node in visited) { \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path); \n                this.restoreEndpoints(); \n                return \n              }\n              if (current_node != target_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n              }\n              current_node = parents[current_node]; \n            }.bind(this), 100)\n          }\n          return \n        }\n        new_queue = [];  \n        for (let i = 0; i < queue.length; i++) { \n            for (let j = 0; j < graph[queue[i]].length; j++) { \n                if (!(graph[queue[i]][j] in visited)) { \n                    parents[graph[queue[i]][j]] = queue[i];\n                    new_queue.push(graph[queue[i]][j]);\n                    visited[graph[queue[i]][j]] = true;\n                }\n            }\n        }\n        queue = new_queue; \n        for (let k = 0; k < queue.length; k++) { \n            if (this.state.conditions[queue[k]] != \"endpoint\") { \n            this.changeTraverseCondition(queue[k], \"considered\");\n            }\n          }\n        }.bind(this), 400)\n  }\n\n  dijkstra() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      this.showWarning(); \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var distances = [1000]\n    var visited = {}\n    var parents = {}\n    for (let i=1; i <= 400;i++) { \n        if (i == start_node) { \n            distances.push(0)\n        }\n        else { \n            distances.push(1000)\n        }\n    } \n    var current_min_distance = 0 \n    var current_min_node = start_node\n    var considering_nodes = setInterval(function() { \n        if (!(this.state.endpoints.includes(current_min_node))) { \n          this.changeTraverseCondition(current_min_node, \"considered\")\n        }\n        if ((target_node in visited) || current_min_distance == 1000) { \n            clearInterval(considering_nodes); \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                this.restoreEndpoints(); \n                clearInterval(getting_path); \n                return \n              }\n              if (current_node != target_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n              }\n              current_node = parents[current_node]; \n            }.bind(this), 100)\n            return \n        }\n        var current_distances = {}\n        for (let j=0; j < graph[current_min_node].length; j++) { \n            if (!(graph[current_min_node][j] in visited)) { \n              if (this.notVertical(current_min_node, graph[current_min_node][j])) { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1.4 \n              }\n              else { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1 \n              }\n        }\n        }\n        Object.keys(current_distances).forEach(function(key) { \n            if (current_distances[key] < distances[key]) { \n                distances[key] = current_distances[key]\n                parents[key] = current_min_node\n                if (!(this.state.endpoints.includes(parseInt(key)))) { \n                  this.changeTraverseCondition(key, \"considered-d\")\n                }\n            }\n        }, this)\n        distances[current_min_node] = 1000\n        visited[current_min_node] = true\n        current_min_distance = Math.min.apply(Math, distances);\n        current_min_node = distances.indexOf(current_min_distance);\n\n    }.bind(this), 40)\n  };\n\n  a_star() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      this.showWarning(); \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var to_be_visited = {}\n    to_be_visited[start_node] = 0\n    var visited = {}\n    var parents = {}\n    var current_node = start_node \n    var considering_nodes = setInterval(function() { \n      if (to_be_visited.length == 0 || current_node == target_node) { \n        clearInterval(considering_nodes); \n        var getting_path = setInterval(function() { \n          if (current_node == start_node) { \n            this.changeTraverseCondition(current_node, \"chosen\");\n            this.restoreEndpoints(); \n            clearInterval(getting_path); \n            return \n          }\n          if (current_node != target_node) { \n            this.changeTraverseCondition(current_node, \"chosen\");\n          }\n          current_node = parents[current_node]; \n        }.bind(this), 100)\n        return \n      }\n      visited[current_node] = true;\n      if (current_node != start_node) { \n        this.changeTraverseCondition(current_node, \"considered\")\n      }\n      delete to_be_visited[current_node];\n      for (let i=0; i < graph[current_node].length; i++) { \n        if (!(graph[current_node][i] in visited)) { \n          if (this.notVertical(graph[current_node][i], current_node)) { \n            var start_cost = 1.4; \n          }\n          else { \n            var start_cost = 1; \n          }\n          var heuristic_cost = this.findDistance(graph[current_node][i], target_node)\n          if (!(graph[current_node][i] in to_be_visited)) { \n            to_be_visited[graph[current_node][i]] = [start_cost, heuristic_cost]\n            parents[graph[current_node][i]] = current_node\n          }\n          else { \n            if (this.getSumArray(to_be_visited[graph[current_node][i]]) > start_cost + heuristic_cost) { \n              to_be_visited[graph[current_node][i]] = [start_cost, heuristic_cost]\n              parents[graph[current_node][i]] = current_node\n            }\n            else if (this.getSumArray(to_be_visited[graph[current_node][i]]) == start_cost + heuristic_cost && to_be_visited[graph[current_node][i]][1] > heuristic_cost) {\n              to_be_visited[graph[current_node][i]] = [start_cost, heuristic_cost]\n              parents[graph[current_node][i]] = current_node\n            }\n          }\n          if (graph[current_node][i] != target_node) { \n            this.changeTraverseCondition(graph[current_node][i], \"considered-d\")\n          }\n        }\n      }\n      var next_node = 1000; // a big value which needs to be replaced later by the first key\n      for (const [key, value] of Object.entries(to_be_visited)) {\n        if (next_node == 1000) { \n          next_node = key \n        }\n        else if (this.getSumArray(value) < this.getSumArray(to_be_visited[next_node])) { \n          next_node = key; \n        }\n        else if ((this.getSumArray(value) == this.getSumArray(to_be_visited[next_node])) && (value[1] < to_be_visited[next_node][1])) { \n          next_node = key;\n        }\n        current_node = next_node; \n      }\n    }.bind(this), 100)\n\n  }\n\n  renderElement(i) { \n    return <Element id={i} condition={this.state.conditions[i]} changecond={() => this.changeInitialCondition(i)}/>\n  }\n\n  renderElements(start) { \n    var elements = []; \n    for (let i = 20*(start-1) + 1; i <= 20*start; i++) { \n      elements.push(this.renderElement(i)); \n    }\n    return elements\n  }\n\n  renderBoard() { \n    var board = []; \n    for (let i = 1; i <= 20; i++) { \n      board.push(<div className = \"board-row\" style={{marginLeft: \"400px\"}}> {this.renderElements(i)}  </div>); \n    }\n    return board\n  }\n\n  render() { \n    return (\n      <div> \n      <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\" style={{marginBottom: \"15px\"}}>\n        <Container>\n        <Navbar.Brand> Pathfinding Visualizer</Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <Nav.Link onClick = {this.showTutorial}> Tutorial </Nav.Link>\n          <NavDropdown title=\"Run Pathfinding Algorithms\" id=\"basic-nav-dropdown\"> \n          <NavDropdown.Item onClick = {this.BFS}>Breadth First Search</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.dijkstra}> Dijkstra's Algorithm</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.a_star}> A* search Algorithm</NavDropdown.Item>\n          </NavDropdown>\n          <NavDropdown title=\"Generate Maze\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item onClick = {this.generateMazePrim}> Randomized Prim's Algorithm</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.generateMazeRandom}> Just a random maze</NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link onClick = {this.reset}> Reset Board </Nav.Link>\n          <Nav.Link onClick = {this.showAlgorithm}>  About Our Algorithms </Nav.Link>\n        </Nav>\n        </Container>\n      </Navbar>\n      <div  style = {{marginBottom: \"10px\"}}> \n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"700px\"}}> Click on a grid to make it a start/end grid. We need two grids to run path finding algorithms. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click twice on a grid to make it an obstacle. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click three times on a grid to reset it to the original grid. </div>\n      </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"1000px\", marginBottom: \"15px\"}}> \n      <button style = {{background: \"#FF99FF\"}}> </button> <span class =\"legend\"> Start/end grid</span>\n      <button style = {{background: \"#000000\"}}> </button> <span class =\"legend\"> Obstacle grid</span>\n      <button style = {{background: \"#FF8000\"}}> </button> <span class =\"legend\"> Explored grid</span>\n      <button style = {{background: \"#FFB266\"}}> </button> <span class =\"legend\"> Soon-to-be-explored grid</span>\n      <button style = {{background: \"#80FF00\"}}> </button> <span class =\"legend\"> Shortest-path grid</span>\n       </div>\n       <TutorialPopUp showTutorial={this.state.tutorialIsOpen}/>\n       <NotEnoughNodesPopUp showWarning = {this.state.warningIsOn}/>\n       <AlgorithmPopUp showAlgorithm = {this.state.algorithmIsOn}/>\n      {this.renderBoard()}\n      </div>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Graph/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}