{"version":3,"sources":["logo.svg","pic1.png","pic2.png","pic4.png","pic5.png","pic6.png","pic7.png","App.js","reportWebVitals.js","index.js"],"names":["popUpTutorial","event","modal","document","querySelector","closeBtn","style","display","addEventListener","Element","props","prevProps","this","condition","current_element","getElementById","id","background","className","onClick","changecond","Component","Graph","changeInitialCondition","bind","addNodeToGraph","changeTraverseCondition","resetExceptEndPoints","reset","resetHelper","BFS","dijkstra","notVertical","findCoordinates","findDistance","deleteNodeFromGraph","generateMazePrimHelper","generateMazeRandomHelper","generateMazeRandom","generateMazePrim","restoreEndpoints","state","adjacency_list","endpoints","conditions","i","new_adjacency_list","first_row","last_row","first_col","last_col","includes","j","Math","floor","i_coordinate","j_coordinate","sqrt","pow","new_conditions","new_endpoints","push","splice","indexOf","setState","candidates","length","k","new_status","block_nodes","number_blocks","random","random_elem","original_graph","explored","cell_list","first_elem","building_blocks","setInterval","current_node","console","log","neighbors","nums_explored","clearInterval","start_node","target_node","graph","queue","visited","new_queue","parents","considering_intervals","getting_path","distances","current_min_distance","current_min_node","considering_nodes","current_distances","Object","keys","forEach","key","parseInt","min","apply","start","elements","renderElement","board","marginLeft","renderElements","Navbar","sticky","bg","variant","marginBottom","Container","Brand","Nav","Link","NavDropdown","title","Item","marginRight","width","class","renderBoard","App","src","pic1","alt","pic2","pic4","pic5","pic6","pic7","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iPAAe,I,qCCAA,G,MAAA,IAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,iC,OCgBzC,SAASA,EAAcC,GACrB,IAAMC,EAAQC,SAASC,cAAc,UAC/BC,EAAWF,SAASC,cAAc,UACxCF,EAAMI,MAAMC,QAAU,QACtBF,EAASG,iBAAiB,SAAS,WACjCN,EAAMI,MAAMC,QAAU,U,IAIpBE,E,kDACJ,WAAYC,GAAQ,uCACZA,G,sDAER,SAAmBC,GACjB,GAAIC,KAAKF,MAAMG,WAAaF,EAAUE,UAAW,CAC/C,IAAIC,EAAkBX,SAASY,eAAeH,KAAKF,MAAMM,IAC7B,WAAxBJ,KAAKF,MAAMG,UACbC,EAAgBR,MAAMW,WAAa,UAEJ,SAAxBL,KAAKF,MAAMG,UAClBC,EAAgBR,MAAMW,WAAa,UAEJ,gBAAxBL,KAAKF,MAAMG,UAClBC,EAAgBR,MAAMW,WAAa,UAEJ,cAAxBL,KAAKF,MAAMG,UAClBC,EAAgBR,MAAMW,WAAa,UAEJ,YAAxBL,KAAKF,MAAMG,UAClBC,EAAgBR,MAAMW,WAAa,UAEJ,UAAxBL,KAAKF,MAAMG,YAClBC,EAAgBR,MAAMW,WAAa,c,oBAIzC,WACE,OAAO,wBAAQC,UAAU,SAASF,GAAMJ,KAAKF,MAAMM,GAAIH,UAAaD,KAAKF,MAAMG,UAAWM,QAAWP,KAAKF,MAAMU,WAAzG,oB,GA5BWC,aA+BhBC,E,kDACJ,WAAYZ,GAAQ,IAAD,uBACjB,cAAMA,IACDa,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9B,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,wBAA0B,EAAKA,wBAAwBF,KAA7B,gBAC/B,EAAKG,qBAAuB,EAAKA,qBAAqBH,KAA1B,gBAC5B,EAAKI,MAAQ,EAAKA,MAAMJ,KAAX,gBACb,EAAKK,YAAc,EAAKA,YAAYL,KAAjB,gBACnB,EAAKM,IAAM,EAAKA,IAAIN,KAAT,gBACX,EAAKO,SAAW,EAAKA,SAASP,KAAd,gBAChB,EAAKQ,YAAc,EAAKA,YAAYR,KAAjB,gBACnB,EAAKS,gBAAkB,EAAKA,gBAAgBT,KAArB,gBACvB,EAAKU,aAAe,EAAKA,aAAaV,KAAlB,gBACpB,EAAKW,oBAAsB,EAAKA,oBAAoBX,KAAzB,gBAC3B,EAAKY,uBAAyB,EAAKA,uBAAuBZ,KAA5B,gBAC9B,EAAKa,yBAA2B,EAAKA,yBAAyBb,KAA9B,gBAChC,EAAKc,mBAAqB,EAAKA,mBAAmBd,KAAxB,gBAC1B,EAAKe,iBAAmB,EAAKA,iBAAiBf,KAAtB,gBACxB,EAAKgB,iBAAmB,EAAKA,iBAAiBhB,KAAtB,gBACxB,EAAKiB,MAAQ,CACXC,eAAgB,GAChBC,UAAU,GACVC,WAAW,IAEb,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAKA,IACxB,EAAKJ,MAAMG,WAAWC,GAAK,UAQ7B,IALA,IAAIC,EAAqB,GACrBC,EAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACxDC,EAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChFC,EAAY,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC7EC,EAAW,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACxEL,EAAI,EAAGA,GAAK,IAAKA,IACf,GAALA,EACFC,EAAmB,GAAK,CAAC,EAAE,GAAI,IAEnB,IAALD,EACPC,EAAmB,IAAM,CAAC,GAAG,GAAG,IAEpB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAI,IAAI,KAEvB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAK,IAAK,KAE9BC,EAAUI,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAE1CG,EAASG,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAE1CI,EAAUE,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,EAAGA,EAAE,GAAIA,EAAE,IAE3CK,EAASC,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAG,IAGvDC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAE,IA3D1D,OA+DjB,EAAKJ,MAAMC,eAAiBI,EA/DX,E,+CAkEnB,SAAYD,EAAGO,GAEb,OAD0B,CAACP,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,IACrBM,SAASC,K,6BAQnC,SAAgBP,GAGd,MAAO,CAFYA,EAAE,GACFQ,KAAKC,MAAMT,EAAE,IAAM,K,0BAIxC,SAAaA,EAAGO,GACd,IAAIG,EAAe3C,KAAKqB,gBAAgBY,GACpCW,EAAe5C,KAAKqB,gBAAgBmB,GAExC,OADeC,KAAKI,KAAKJ,KAAKK,IAAKH,EAAa,GAAKC,EAAa,GAAI,GAAKH,KAAKK,IAAIH,EAAa,GAAKC,EAAa,GAAI,M,oCAIzH,SAAuBX,GACrB,IAAIc,EAAiB/C,KAAK6B,MAAMG,WAC5BgB,EAAgBhD,KAAK6B,MAAME,UAC3BG,EAAqBlC,KAAK6B,MAAMC,eACJ,WAA5B9B,KAAK6B,MAAMG,WAAWC,IACxBc,EAAed,GAAK,WACpBe,EAAcC,KAAKhB,IAEgB,YAA5BjC,KAAK6B,MAAMG,WAAWC,IAC7Bc,EAAed,GAAK,QACpBe,EAAcE,OAAOF,EAAcG,QAAQlB,GAAI,GAC/CC,EAAqBlC,KAAKuB,oBAAoBU,IAEX,SAA5BjC,KAAK6B,MAAMG,WAAWC,KAC7Bc,EAAed,GAAK,UACpBC,EAAqBlC,KAAKa,eAAeoB,IAE3CjC,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,EACZhB,UAAWiB,EACXlB,eAAgBI,Q,iCAIpB,SAAoBD,GAClB,IAAIC,EAAqBlC,KAAK6B,MAAMC,eACpCI,EAAmBD,GAAK,GAExB,IADA,IAAIoB,EAAa,CAACpB,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAE,IACvDO,EAAE,EAAGA,EAAIa,EAAWC,OAAQd,IAC/Ba,EAAWb,KAAMN,GACfA,EAAmBmB,EAAWb,IAAID,SAASN,IAC7CC,EAAmBmB,EAAWb,IAAIU,OAAOhB,EAAmBmB,EAAWb,IAAIW,QAAQlB,GAAI,GAI7F,OAAOC,I,4BAGT,SAAeD,GACb,IAAIC,EAAqBlC,KAAK6B,MAAMC,eAK3B,GAALG,EACFC,EAAmB,GAAK,CAAC,EAAE,GAAI,IAEnB,IAALD,EACPC,EAAmB,IAAM,CAAC,GAAG,GAAG,IAEpB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAI,IAAI,KAEvB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAK,IAAK,KAdvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAgBzCK,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAhBpC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAkBlEM,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAlBnC,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAoB9DM,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,EAAGA,EAAE,GAAIA,EAAE,IApBrC,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAsB/DM,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAG,IAGvDC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAE,IAEzE,IAAK,IAAIsB,EAAE,EAAGA,EAAIrB,EAAmBD,GAAGqB,OAAQC,IAAK,CAEnDrB,EADqBA,EAAmBD,GAAGsB,IACRN,KAAKhB,GAE1C,OAAOC,I,qCAGT,SAAwBD,EAAGuB,GACzB,IAAIT,EAAiB/C,KAAK6B,MAAMG,WAC5BE,EAAqBlC,KAAK6B,MAAMC,eAChCkB,EAAgBhD,KAAK6B,MAAME,UAC/BgB,EAAed,GAAKuB,EACpBxD,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,EACZhB,UAAWiB,EACXlB,eAAgBI,Q,kCAIpB,WAIE,IAHA,IAAIa,EAAiB/C,KAAK6B,MAAMG,WAC5BE,EAAqBlC,KAAK6B,MAAMC,eAChCkB,EAAgBhD,KAAK6B,MAAME,UACtBE,EAAI,EAAGA,GAAK,IAAKA,IAClBe,EAAcT,SAASN,IAA4B,SAArBc,EAAed,GAG1Ce,EAAcT,SAASN,KAC9Bc,EAAed,GAAK,YAHpBc,EAAed,GAAK,UAMxBjC,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,EACZhB,UAAWiB,EACXlB,eAAgBI,Q,8BAIpB,WAEE,IADA,IAAIa,EAAiB/C,KAAK6B,MAAMG,WACvBC,EAAI,EAAGA,EAAIjC,KAAK6B,MAAME,UAAUuB,OAAQrB,IAC/Cc,EAAe/C,KAAK6B,MAAME,UAAUE,IAAM,WAE5CjC,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,Q,yBAIhB,WAQE,IAPA,IAAIA,EAAiB,GAEjBb,EAAqB,GACrBC,EAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACxDC,EAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChFC,EAAY,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC7EC,EAAW,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACxEL,EAAI,EAAGA,GAAK,IAAKA,IACf,GAALA,EACFC,EAAmB,GAAK,CAAC,EAAE,GAAI,IAEnB,IAALD,EACPC,EAAmB,IAAM,CAAC,GAAG,GAAG,IAEpB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAI,IAAI,KAEvB,KAALD,EACPC,EAAmB,KAAO,CAAC,IAAK,IAAK,KAE9BC,EAAUI,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAE1CG,EAASG,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAE1CI,EAAUE,SAASN,GAC1BC,EAAmBD,GAAK,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,EAAGA,EAAE,GAAIA,EAAE,IAE3CK,EAASC,SAASN,GACzBC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAG,IAGvDC,EAAmBD,GAAK,CAACA,EAAE,EAAGA,EAAE,EAAGA,EAAE,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAE,IAG3E,IAAK,IAAIA,EAAI,EAAGA,GAAK,IAAKA,IACxBc,EAAed,GAAK,UAEtB,MAAO,CAACc,EAtCY,GAsCmBb,K,mBAGzC,WAAS,IAAD,OACNlC,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAY,EAAKf,cAAc,GAC/Bc,UAAW,EAAKd,cAAc,GAC9Ba,eAAgB,EAAKb,cAAc,S,gCAIvC,WAAsB,IAAD,OACnBjB,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAY,EAAKf,cAAc,GAC/Bc,UAAW,EAAKd,cAAc,GAC9Ba,eAAgB,EAAKb,cAAc,MACjCjB,KAAKyB,4B,8BAEX,WAAoB,IAAD,OACjBzB,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAY,EAAKf,cAAc,GAC/Bc,UAAW,EAAKd,cAAc,GAC9Ba,eAAgB,EAAKb,cAAc,MACjCjB,KAAKwB,0B,sCAGX,WAIE,IAHA,IAAIiC,EAAc,GACdV,EAAiB/C,KAAK6B,MAAMG,WAC5B0B,EAAgBjB,KAAKC,MAAoB,GAAdD,KAAKkB,SAAc,IACzC1B,EAAI,EAAGA,EAAIyB,EAAezB,IAAK,CAEtC,IADA,IAAI2B,EAAcnB,KAAKC,MAAoB,IAAdD,KAAKkB,SAAe,GACX,WAA/BZ,EAAea,IACpBA,EAAcnB,KAAKC,MAAoB,IAAdD,KAAKkB,SAAe,GAE/CZ,EAAea,GAAe,QAC9BH,EAAYR,KAAKW,GAEnB5D,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,MAEd,IAAK,IAAId,EAAE,EAAGA,EAAIwB,EAAYH,OAAQrB,IACpCjC,KAAKoD,SAAS,CACZtB,eAAgB9B,KAAKuB,oBAAoBkC,EAAYxB,Q,oCAK3D,WAKE,IAJA,IAAIc,EAAiB/C,KAAK6B,MAAMG,WAC5B6B,EAAiB7D,KAAK6B,MAAMC,eAC5BgC,EAAW,GACXC,EAAY,GACP9B,EAAE,EAAGA,GAAK,IAAKA,IACtBc,EAAed,GAAK,QAEtB,IAAI+B,EAAavB,KAAKC,MAAsB,IAAhBD,KAAKkB,SAAiB,GAClDZ,EAAeiB,GAAc,UAC7BF,EAAS,IAAK,EACd,IAAK,IAAItB,EAAE,EAAGA,EAAIqB,EAAe,GAAGP,OAAQd,IAC1CuB,EAAUd,KAAKY,EAAe,GAAGrB,IAEnC,IAAIyB,EAAkBC,YAAY,WAAY,IAAD,OAC3C,GAAwB,GAApBH,EAAUT,OAAd,CAYA,IAAIa,EAAeJ,EAAUtB,KAAKC,MAAMD,KAAKkB,SAASI,EAAUT,SAChEc,QAAQC,IAAIF,GAGZ,IAFA,IAAIG,EAAYT,EAAeM,GAC3BI,EAAgB,EACXtC,EAAE,EAAGA,EAAIqC,EAAUhB,OAAQrB,IAC9BqC,EAAUrC,KAAM6B,IAClBS,GAAiB,GAGrB,GAAIA,EAAgB,EAAG,CACrBT,EAASK,IAAgB,EACzBpB,EAAeoB,GAAgB,UAC/B,IAAK,IAAI3B,EAAE,EAAGA,EAAIqB,EAAeM,GAAcb,OAAQd,IAC/CqB,EAAeM,GAAc3B,KAAMsB,GACvCC,EAAUd,KAAKY,EAAeM,GAAc3B,IAIlDuB,EAAUb,OAAOa,EAAUZ,QAAQgB,GAAe,GAClDnE,KAAKoD,UAAS,SAAAvB,GAAK,MAAK,CACtBG,WAAYe,UAhCd,CACEqB,QAAQC,IAAI,QACZG,cAAcP,GACd,IAHyB,eAGhBhC,GACDA,KAAK6B,GACT,EAAKV,UAAS,SAAAvB,GAAK,MAAK,CACtBC,eAAgB,EAAKP,oBAAoBU,QAHtCA,EAAI,EAAGA,GAAK,IAAKA,IAAM,EAAvBA,KA+BXrB,KAAKZ,MAAO,Q,iBAGhB,WAEE,GADAA,KAAKe,uBAC8B,GAA/Bf,KAAK6B,MAAME,UAAUuB,OAAzB,CAGA,IAAImB,EAAazE,KAAK6B,MAAME,UAAU,GAClC2C,EAAc1E,KAAK6B,MAAME,UAAU,GACnC4C,EAAQ3E,KAAK6B,MAAMC,eACnB8C,EAAQ,CAACH,GACTI,EAAU,GACdA,EAAQJ,IAAc,EACtB,IAAIK,EAAY,GACZC,EAAU,GACVC,EAAwBd,YAAY,WACpC,GAAoB,GAAhBU,EAAMtB,QAAeoB,KAAeG,GAEtC,GADAL,cAAcQ,GACVN,KAAeG,EACjB,IAAIV,EAAeO,EACfO,EAAef,YAAY,WAC7B,GAAIC,GAAgBM,EAIlB,OAHAzE,KAAKc,wBAAwBqD,EAAc,UAC3CK,cAAcS,QACdjF,KAAK4B,mBAGP5B,KAAKc,wBAAwBqD,EAAc,UAC3CA,EAAeY,EAAQZ,IACvBvD,KAAKZ,MAAO,SAblB,CAiBA8E,EAAY,GACZ,IAAK,IAAI7C,EAAI,EAAGA,EAAI2C,EAAMtB,OAAQrB,IAC9B,IAAK,IAAIO,EAAI,EAAGA,EAAImC,EAAMC,EAAM3C,IAAIqB,OAAQd,IAClCmC,EAAMC,EAAM3C,IAAIO,KAAMqC,IACxBE,EAAQJ,EAAMC,EAAM3C,IAAIO,IAAMoC,EAAM3C,GACpC6C,EAAU7B,KAAK0B,EAAMC,EAAM3C,IAAIO,IAC/BqC,EAAQF,EAAMC,EAAM3C,IAAIO,KAAM,GAI1CoC,EAAQE,EACR,IAAK,IAAIvB,EAAI,EAAGA,EAAIqB,EAAMtB,OAAQC,IACS,YAAnCvD,KAAK6B,MAAMG,WAAW4C,EAAMrB,KAChCvD,KAAKc,wBAAwB8D,EAAMrB,GAAI,gBAGzC3C,KAAKZ,MAAO,Q,sBAGpB,WAEE,GADAA,KAAKe,uBAC8B,GAA/Bf,KAAK6B,MAAME,UAAUuB,OAAzB,CASA,IANA,IAAImB,EAAazE,KAAK6B,MAAME,UAAU,GAClC2C,EAAc1E,KAAK6B,MAAME,UAAU,GACnC4C,EAAQ3E,KAAK6B,MAAMC,eACnBoD,EAAY,CAAC,KACbL,EAAU,GACVE,EAAU,GACL9C,EAAE,EAAGA,GAAK,IAAIA,IACfA,GAAKwC,EACLS,EAAUjC,KAAK,GAGfiC,EAAUjC,KAAK,KAGvB,IAAIkC,EAAuB,EACvBC,EAAmBX,EACnBY,EAAoBnB,YAAY,WAIhC,GAHMlE,KAAK6B,MAAME,UAAUQ,SAAS6C,IAClCpF,KAAKc,wBAAwBsE,EAAkB,cAE5CV,KAAeG,GAAoC,KAAxBM,EAAhC,CACIX,cAAca,GACd,IAAIlB,EAAeO,EACfO,EAAef,YAAY,WAC7B,GAAIC,GAAgBM,EAIlB,OAHAzE,KAAKc,wBAAwBqD,EAAc,UAC3CnE,KAAK4B,wBACL4C,cAAcS,GAGhBjF,KAAKc,wBAAwBqD,EAAc,UAC3CA,EAAeY,EAAQZ,IACvBvD,KAAKZ,MAAO,SAZlB,CAgBA,IADA,IAAIsF,EAAoB,GACf9C,EAAE,EAAGA,EAAImC,EAAMS,GAAkB9B,OAAQd,IACxCmC,EAAMS,GAAkB5C,KAAMqC,IAC9B7E,KAAKoB,YAAYgE,EAAkBT,EAAMS,GAAkB5C,IAC7D8C,EAAkBX,EAAMS,GAAkB5C,IAAM2C,EAAuB,IAGvEG,EAAkBX,EAAMS,GAAkB5C,IAAM2C,EAAuB,GAI/EI,OAAOC,KAAKF,GAAmBG,SAAQ,SAASC,GACxCJ,EAAkBI,GAAOR,EAAUQ,KACnCR,EAAUQ,GAAOJ,EAAkBI,GACnCX,EAAQW,GAAON,EACTpF,KAAK6B,MAAME,UAAUQ,SAASoD,SAASD,KAC3C1F,KAAKc,wBAAwB4E,EAAK,mBAGzC1F,MACHkF,EAAUE,GAAoB,IAC9BP,EAAQO,IAAoB,EAC5BD,EAAuB1C,KAAKmD,IAAIC,MAAMpD,KAAMyC,GAC5CE,EAAmBF,EAAU/B,QAAQgC,KAEvCvE,KAAKZ,MAAO,O,2BAGhB,SAAciC,GAAI,IAAD,OACf,OAAO,cAAC,EAAD,CAAS7B,GAAI6B,EAAGhC,UAAWD,KAAK6B,MAAMG,WAAWC,GAAIzB,WAAY,kBAAM,EAAKG,uBAAuBsB,Q,4BAG5G,SAAe6D,GAEb,IADA,IAAIC,EAAW,GACN9D,EAAI,IAAI6D,EAAM,GAAK,EAAG7D,GAAK,GAAG6D,EAAO7D,IAC5C8D,EAAS9C,KAAKjD,KAAKgG,cAAc/D,IAEnC,OAAO8D,I,yBAGT,WAEE,IADA,IAAIE,EAAQ,GACHhE,EAAI,EAAGA,GAAK,GAAIA,IACvBgE,EAAMhD,KAAK,sBAAK3C,UAAY,YAAYZ,MAAO,CAACwG,WAAY,SAAjD,cAA6DlG,KAAKmG,eAAelE,GAAjF,SAEb,OAAOgE,I,oBAGT,WACE,OACE,gCACA,cAACG,EAAA,EAAD,CAAQC,OAAO,MAAMC,GAAG,OAAOC,QAAQ,OAAO7G,MAAO,CAAC8G,aAAc,QAApE,SACE,eAACC,EAAA,EAAD,WACA,cAACL,EAAA,EAAOM,MAAR,sCACA,eAACC,EAAA,EAAD,CAAKrG,UAAU,UAAf,UACE,cAACqG,EAAA,EAAIC,KAAL,CAAUrG,QAASnB,EAAnB,wBACA,eAACyH,EAAA,EAAD,CAAaC,MAAM,6BAA6B1G,GAAG,qBAAnD,UACA,cAACyG,EAAA,EAAYE,KAAb,CAAkBxG,QAAWP,KAAKkB,IAAlC,kCACA,cAAC2F,EAAA,EAAYE,KAAb,CAAkBxG,QAAWP,KAAKmB,SAAlC,sCAEA,eAAC0F,EAAA,EAAD,CAAaC,MAAM,gBAAgB1G,GAAG,qBAAtC,UACA,cAACyG,EAAA,EAAYE,KAAb,CAAkBxG,QAAWP,KAAK2B,iBAAlC,0CACA,cAACkF,EAAA,EAAYE,KAAb,CAAkBxG,QAAWP,KAAK0B,mBAAlC,oCAEA,cAACiF,EAAA,EAAIC,KAAL,CAAUrG,QAAWP,KAAKgB,MAA1B,mCAIJ,sBAAMtB,MAAS,CAAC8G,aAAc,QAA9B,UACA,qBAAK9G,MAAS,CAACwG,WAAY,OAAQc,YAAa,OAAQC,MAAO,SAA/D,8GACA,qBAAKvH,MAAS,CAACwG,WAAY,OAAQc,YAAa,OAAQC,MAAO,SAA/D,6DACA,qBAAKvH,MAAS,CAACwG,WAAY,OAAQc,YAAa,OAAQC,MAAO,SAA/D,gFAEA,sBAAKvH,MAAS,CAACwG,WAAY,OAAQc,YAAa,OAAQC,MAAO,SAAUT,aAAc,QAAvF,UACA,wBAAQ9G,MAAS,CAACW,WAAY,WAA9B,eADA,IACqD,sBAAM6G,MAAO,SAAb,6BACrD,wBAAQxH,MAAS,CAACW,WAAY,WAA9B,eAFA,IAEqD,sBAAM6G,MAAO,SAAb,4BACrD,wBAAQxH,MAAS,CAACW,WAAY,WAA9B,eAHA,IAGqD,sBAAM6G,MAAO,SAAb,4BACrD,wBAAQxH,MAAS,CAACW,WAAY,WAA9B,eAJA,IAIqD,sBAAM6G,MAAO,SAAb,uCACrD,wBAAQxH,MAAS,CAACW,WAAY,WAA9B,eALA,IAKqD,sBAAM6G,MAAO,SAAb,oCAEpDlH,KAAKmH,qB,GAvgBQ1G,aAyiBL2G,MA3Bf,WACE,OACE,sBAAK9G,UAAU,MAAf,UACA,cAAC,EAAD,IACA,qBAAK4G,MAAM,QAAX,SACE,sBAAKA,MAAM,gBAAX,UACE,sBAAMA,MAAM,QAAZ,kBACA,yEACA,qBAAKG,IAAOC,EAAMC,IAAI,cACtB,6IACA,qBAAKF,IAAOG,EAAMD,IAAI,+BACtB,+GACA,qBAAKF,IAAOI,EAAMF,IAAI,kBACtB,gFACA,qBAAKF,IAAOK,EAAMH,IAAI,aACtB,oNACA,qBAAKF,IAAOM,EAAMJ,IAAI,SACtB,iLACA,qBAAKF,IAAOO,EAAML,IAAI,aACtB,6GACA,8DC9kBOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjJ,SAASY,eAAe,SAM1B0H,M","file":"static/js/main.4a3bb98d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/pic1.6a988925.png\";","export default __webpack_public_path__ + \"static/media/pic2.5c986050.png\";","export default __webpack_public_path__ + \"static/media/pic4.f20d2566.png\";","export default __webpack_public_path__ + \"static/media/pic5.9c12f257.png\";","export default __webpack_public_path__ + \"static/media/pic6.706839af.png\";","export default __webpack_public_path__ + \"static/media/pic7.db9632b4.png\";","import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport {NavDropdown, Navbar, Container, Nav} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport pic1 from './pic1.png'\nimport pic2 from './pic2.png'\nimport pic4 from './pic4.png'\nimport pic5 from './pic5.png'\nimport pic6 from './pic6.png'\nimport pic7 from './pic7.png'\n\n /* TODO: \n-  add A* search \n */\n\nfunction popUpTutorial(event) {\n  const modal = document.querySelector(\".modal\")\n  const closeBtn = document.querySelector(\".close\")\n  modal.style.display = \"block\";\n  closeBtn.addEventListener(\"click\", () => {\n    modal.style.display = \"none\";\n  })\n}\n\nclass Element extends Component { \n  constructor(props) {\n    super(props);\n  };\n  componentDidUpdate(prevProps) {\n    if (this.props.condition != prevProps.condition) { \n      var current_element = document.getElementById(this.props.id);\n      if (this.props.condition == \"default\") { \n        current_element.style.background = '#FFFFFF';\n      }\n      else if (this.props.condition == \"block\") { \n        current_element.style.background = \"#000000\";\n      }\n      else if (this.props.condition == \"considered-d\") { \n        current_element.style.background = \"#FFB266\"\n      }\n      else if (this.props.condition == \"considered\") { \n        current_element.style.background = \"#FF8000\";\n      }\n      else if (this.props.condition == \"endpoint\") { \n        current_element.style.background = \"#FF99FF\";\n      }\n      else if (this.props.condition == \"chosen\") { \n        current_element.style.background = \"#80FF00\";\n      }\n    }; \n  };\n  render() { \n    return <button className=\"square\" id = {this.props.id} condition = {this.props.condition} onClick = {this.props.changecond}>  </button>;\n  };\n};\nclass Graph extends Component { \n  constructor(props) { \n    super(props); \n    this.changeInitialCondition = this.changeInitialCondition.bind(this);\n    this.addNodeToGraph = this.addNodeToGraph.bind(this);\n    this.changeTraverseCondition = this.changeTraverseCondition.bind(this);\n    this.resetExceptEndPoints = this.resetExceptEndPoints.bind(this); \n    this.reset = this.reset.bind(this); \n    this.resetHelper = this.resetHelper.bind(this); \n    this.BFS = this.BFS.bind(this);\n    this.dijkstra = this.dijkstra.bind(this);\n    this.notVertical = this.notVertical.bind(this)\n    this.findCoordinates = this.findCoordinates.bind(this)\n    this.findDistance = this.findDistance.bind(this)\n    this.deleteNodeFromGraph = this.deleteNodeFromGraph.bind(this)\n    this.generateMazePrimHelper = this.generateMazePrimHelper.bind(this)\n    this.generateMazeRandomHelper = this.generateMazeRandomHelper.bind(this)\n    this.generateMazeRandom = this.generateMazeRandom.bind(this)\n    this.generateMazePrim = this.generateMazePrim.bind(this)\n    this.restoreEndpoints = this.restoreEndpoints.bind(this)\n    this.state = { \n      adjacency_list: {},\n      endpoints:[], \n      conditions:{}, \n    };\n    for (let i = 1; i <= 400; i++) {\n      this.state.conditions[i] = \"default\"; \n    };\n    /* TODO: initialize adjacency_list */\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    //this.state.adjacency_list = new_adjacency_list;\n    this.state.adjacency_list = new_adjacency_list\n  };\n\n  notVertical(i, j) { \n    var vertical_candidates = [i-1, i+1, i-20, i+20]\n    if (vertical_candidates.includes(j)) { \n      return false; \n    }\n    else { \n      return true;  \n    }\n  }\n\n  findCoordinates(i) { \n    var x_coordinate = i%20; \n    var y_coordinate = Math.floor(i/20) + 1; \n    return [x_coordinate, y_coordinate]; \n  }\n\n  findDistance(i, j) { \n    var i_coordinate = this.findCoordinates(i); \n    var j_coordinate = this.findCoordinates(j);\n    var distance = Math.sqrt(Math.pow((i_coordinate[0] - j_coordinate[0]),2) + Math.pow(i_coordinate[1] - j_coordinate[2], 2))\n    return distance \n  }\n\n  changeInitialCondition(i) { \n    var new_conditions = this.state.conditions;\n    var new_endpoints = this.state.endpoints;\n    var new_adjacency_list = this.state.adjacency_list; \n    if (this.state.conditions[i] == \"default\") { \n      new_conditions[i] = \"endpoint\"; \n      new_endpoints.push(i) \n    }\n    else if (this.state.conditions[i] == \"endpoint\") { \n      new_conditions[i] = \"block\"; \n      new_endpoints.splice(new_endpoints.indexOf(i), 1); \n      new_adjacency_list = this.deleteNodeFromGraph(i);\n    }\n    else if (this.state.conditions[i] == \"block\") { \n      new_conditions[i] = \"default\"; \n      new_adjacency_list = this.addNodeToGraph(i)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }; \n\n  deleteNodeFromGraph(i) {\n    var new_adjacency_list = this.state.adjacency_list; \n    new_adjacency_list[i] = [];\n    var candidates = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    for (var j=0; j < candidates.length; j++) { \n      if (candidates[j] in new_adjacency_list) { \n        if (new_adjacency_list[candidates[j]].includes(i)) { \n          new_adjacency_list[candidates[j]].splice(new_adjacency_list[candidates[j]].indexOf(i), 1); \n        }\n      }\n    }\n    return new_adjacency_list;  \n  }\n\n  addNodeToGraph(i) { \n    var new_adjacency_list = this.state.adjacency_list; \n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399];\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361];\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380];\n    if (i == 1) { \n      new_adjacency_list[1] = [2,21, 22];\n    }\n    else if (i == 20) { \n      new_adjacency_list[20] = [19,39,40];\n    }\n    else if (i == 381) { \n      new_adjacency_list[381] = [361,362,382];\n    }\n    else if (i == 400) { \n      new_adjacency_list[400] = [379, 380, 399];\n    }\n    else if (first_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21];\n    }\n    else if (last_row.includes(i)) { \n      new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21];\n    }\n    else if (first_col.includes(i)) { \n      new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21];\n    }\n    else if (last_col.includes(i)) { \n      new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20];\n    }\n    else { \n      new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21];\n    }\n    for (let k=0; k < new_adjacency_list[i].length; k++) { \n      var element_need_i = new_adjacency_list[i][k];\n      new_adjacency_list[element_need_i].push(i);\n    }\n    return new_adjacency_list; \n  };\n\n  changeTraverseCondition(i, new_status) { \n    var new_conditions = this.state.conditions; \n    var new_adjacency_list = this.state.adjacency_list; \n    var new_endpoints = this.state.endpoints\n    new_conditions[i] = new_status; \n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  resetExceptEndPoints() { \n    var new_conditions = this.state.conditions \n    var new_adjacency_list = this.state.adjacency_list\n    var new_endpoints = this.state.endpoints\n    for (let i = 1; i <= 400; i++) {\n      if (!(new_endpoints.includes(i)) && new_conditions[i] != \"block\") {\n        new_conditions[i] = \"default\";\n      } \n      else if (new_endpoints.includes(i)) { \n        new_conditions[i] = \"endpoint\"; \n      }\n    };\n    this.setState(state => ({ \n      conditions: new_conditions,\n      endpoints: new_endpoints,\n      adjacency_list: new_adjacency_list, \n    })); \n  }\n\n  restoreEndpoints() { \n    var new_conditions = this.state.conditions\n    for (let i = 0; i < this.state.endpoints.length; i++) { \n      new_conditions[this.state.endpoints[i]] = \"endpoint\"\n    }; \n    this.setState(state => ({ \n      conditions: new_conditions \n    }))\n  }\n\n  resetHelper() { \n    var new_conditions = []\n    var new_endpoints = []\n    var new_adjacency_list = {}\n    var first_row = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    var last_row = [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399]\n    var first_col = [21,41,61,81,101,121,141,161,181,201,221,241,261,281,301,321,341,361]\n    var last_col = [40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380]\n    for (let i = 1; i <= 400; i++) { \n      if (i == 1) { \n        new_adjacency_list[1] = [2,21, 22]\n      }\n      else if (i == 20) { \n        new_adjacency_list[20] = [19,39,40]\n      }\n      else if (i == 381) { \n        new_adjacency_list[381] = [361,362,382]\n      }\n      else if (i == 400) { \n        new_adjacency_list[400] = [379, 380, 399]\n      }\n      else if (first_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i+20, i+19, i+21]\n      }\n      else if (last_row.includes(i)) { \n        new_adjacency_list[i] = [i-1, i+1, i-20, i-19, i-21]\n      }\n      else if (first_col.includes(i)) { \n        new_adjacency_list[i] = [i-20, i+20, i+1, i-19, i+21]\n      }\n      else if (last_col.includes(i)) { \n        new_adjacency_list[i] = [i-1, i-21, i + 20, i + 19, i- 20]\n      }\n      else { \n        new_adjacency_list[i] = [i-1, i+1, i-19, i- 20, i- 21, i+ 19, i +20, i+21]\n      }\n    };\n    for (let i = 1; i <= 400; i++) {\n      new_conditions[i] = \"default\"; \n    };\n    return [new_conditions, new_endpoints, new_adjacency_list]\n  }\n\n  reset() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    })); \n  }\n\n  generateMazeRandom() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazeRandomHelper); \n  }\n  generateMazePrim() { \n    this.setState(state => ({ \n      conditions: this.resetHelper()[0],\n      endpoints: this.resetHelper()[1],\n      adjacency_list: this.resetHelper()[2], \n    }), this.generateMazePrimHelper); \n  }\n\n  generateMazeRandomHelper() { \n    var block_nodes = []\n    var new_conditions = this.state.conditions; \n    var number_blocks = Math.floor(Math.random()*50 + 50) \n    for (let i = 0; i < number_blocks; i++) { \n      var random_elem = Math.floor(Math.random()*400 + 1) \n      while (new_conditions[random_elem] != \"default\") { \n        random_elem = Math.floor(Math.random()*400 + 1) \n      }\n      new_conditions[random_elem] = \"block\"\n      block_nodes.push(random_elem)\n    }\n    this.setState(state => ({ \n      conditions: new_conditions\n    }))\n    for (let i=0; i < block_nodes.length; i++) { \n      this.setState({ \n        adjacency_list: this.deleteNodeFromGraph(block_nodes[i])\n      })\n    }\n  }\n\n  generateMazePrimHelper() { \n    var new_conditions = this.state.conditions; \n    var original_graph = this.state.adjacency_list; \n    var explored = {}\n    var cell_list = [] \n    for (let i=1; i <= 400; i++) { \n      new_conditions[i] = \"block\";\n    }\n    var first_elem = Math.floor(Math.random() * 400 + 1); \n    new_conditions[first_elem] = \"default\"; \n    explored[1] = true \n    for (let j=0; j < original_graph[1].length; j++) { \n      cell_list.push(original_graph[1][j]); \n    }\n    var building_blocks = setInterval(function() { \n      if (cell_list.length == 0) { \n        console.log(\"here\")\n        clearInterval(building_blocks); \n        for (let i = 1; i <= 400; i++) { \n          if (!(i in explored)) { \n            this.setState(state => ({ \n              adjacency_list: this.deleteNodeFromGraph(i)\n            }))\n          }\n        }\n        return \n      }\n      var current_node = cell_list[Math.floor(Math.random()*cell_list.length)]; \n      console.log(current_node)\n      var neighbors = original_graph[current_node]; \n      var nums_explored = 0 \n      for (let i=0; i < neighbors.length; i++) { \n        if (neighbors[i] in explored) { \n          nums_explored += 1\n        }\n      }\n      if (nums_explored < 2) { \n        explored[current_node] = true \n        new_conditions[current_node] = \"default\" \n        for (let j=0; j < original_graph[current_node].length; j++) { \n          if (!(original_graph[current_node][j] in explored)) { \n            cell_list.push(original_graph[current_node][j]); \n          }\n        }\n      }\n      cell_list.splice(cell_list.indexOf(current_node), 1); \n      this.setState(state => ({ \n        conditions: new_conditions,\n      })); \n    }.bind(this), 0.001)\n  }\n\n  BFS() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var queue = [start_node]; \n    var visited = {};\n    visited[start_node] = true; \n    var new_queue = [];\n    var parents = {};\n    var considering_intervals = setInterval(function(){\n        if (queue.length == 0 || target_node in visited) { \n          clearInterval(considering_intervals);\n          if (target_node in visited) { \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                clearInterval(getting_path); \n                this.restoreEndpoints(); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n          }\n          return \n        }\n        new_queue = [];  \n        for (let i = 0; i < queue.length; i++) { \n            for (let j = 0; j < graph[queue[i]].length; j++) { \n                if (!(graph[queue[i]][j] in visited)) { \n                    parents[graph[queue[i]][j]] = queue[i];\n                    new_queue.push(graph[queue[i]][j]);\n                    visited[graph[queue[i]][j]] = true;\n                }\n            }\n        }\n        queue = new_queue; \n        for (let k = 0; k < queue.length; k++) { \n            if (this.state.conditions[queue[k]] != \"endpoint\") { \n            this.changeTraverseCondition(queue[k], \"considered\");\n            }\n          }\n        }.bind(this), 400)\n  }\n\n  dijkstra() { \n    this.resetExceptEndPoints(); \n    if (this.state.endpoints.length != 2) { \n      return \n    }\n    var start_node = this.state.endpoints[0];\n    var target_node = this.state.endpoints[1];\n    var graph = this.state.adjacency_list;\n    var distances = [1000]\n    var visited = {}\n    var parents = {}\n    for (let i=1; i <= 400;i++) { \n        if (i == start_node) { \n            distances.push(0)\n        }\n        else { \n            distances.push(1000)\n        }\n    } \n    var current_min_distance = 0 \n    var current_min_node = start_node\n    var considering_nodes = setInterval(function() { \n        if (!(this.state.endpoints.includes(current_min_node))) { \n          this.changeTraverseCondition(current_min_node, \"considered\")\n        }\n        if ((target_node in visited) || current_min_distance == 1000) { \n            clearInterval(considering_nodes); \n            var current_node = target_node; \n            var getting_path = setInterval(function() { \n              if (current_node == start_node) { \n                this.changeTraverseCondition(current_node, \"chosen\");\n                this.restoreEndpoints(); \n                clearInterval(getting_path); \n                return \n              }\n              this.changeTraverseCondition(current_node, \"chosen\");\n              current_node = parents[current_node]; \n            }.bind(this), 300)\n            return \n        }\n        var current_distances = {}\n        for (let j=0; j < graph[current_min_node].length; j++) { \n            if (!(graph[current_min_node][j] in visited)) { \n              if (this.notVertical(current_min_node, graph[current_min_node][j])) { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1.4 \n              }\n              else { \n                current_distances[graph[current_min_node][j]] = current_min_distance + 1 \n              }\n        }\n        }\n        Object.keys(current_distances).forEach(function(key) { \n            if (current_distances[key] < distances[key]) { \n                distances[key] = current_distances[key]\n                parents[key] = current_min_node\n                if (!(this.state.endpoints.includes(parseInt(key)))) { \n                  this.changeTraverseCondition(key, \"considered-d\")\n                }\n            }\n        }, this)\n        distances[current_min_node] = 1000\n        visited[current_min_node] = true\n        current_min_distance = Math.min.apply(Math, distances);\n        current_min_node = distances.indexOf(current_min_distance);\n\n    }.bind(this), 40)\n  };\n\n  renderElement(i) { \n    return <Element id={i} condition={this.state.conditions[i]} changecond={() => this.changeInitialCondition(i)}/>\n  }\n\n  renderElements(start) { \n    var elements = []; \n    for (let i = 20*(start-1) + 1; i <= 20*start; i++) { \n      elements.push(this.renderElement(i)); \n    }\n    return elements\n  }\n\n  renderBoard() { \n    var board = []; \n    for (let i = 1; i <= 20; i++) { \n      board.push(<div className = \"board-row\" style={{marginLeft: \"400px\"}}> {this.renderElements(i)}  </div>); \n    }\n    return board\n  }\n\n  render() { \n    return (\n      <div> \n      <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\" style={{marginBottom: \"15px\"}}>\n        <Container>\n        <Navbar.Brand> Pathfinding Visualizer</Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <Nav.Link onClick={popUpTutorial}> Tutorial </Nav.Link>\n          <NavDropdown title=\"Run Pathfinding Algorithms\" id=\"basic-nav-dropdown\"> \n          <NavDropdown.Item onClick = {this.BFS}>Breadth First Search</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.dijkstra}> Dijkstra's Algorithm</NavDropdown.Item>\n          </NavDropdown>\n          <NavDropdown title=\"Generate Maze\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item onClick = {this.generateMazePrim}> Randomized Prim's Algorithm</NavDropdown.Item>\n          <NavDropdown.Item onClick = {this.generateMazeRandom}> Just a random maze</NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link onClick = {this.reset}> Reset Board </Nav.Link>\n        </Nav>\n        </Container>\n      </Navbar>\n      <div  style = {{marginBottom: \"10px\"}}> \n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"700px\"}}> Click on a grid to make it a start/end grid. We need two grids to run path finding algorithms. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click twice on a grid to make it an obstacle. </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"500px\"}}> Click three times on a grid to reset it to the original grid. </div>\n      </div>\n      <div style = {{marginLeft: \"auto\", marginRight: \"auto\", width: \"1000px\", marginBottom: \"15px\"}}> \n      <button style = {{background: \"#FF99FF\"}}> </button> <span class =\"legend\"> Start/end grid</span>\n      <button style = {{background: \"#000000\"}}> </button> <span class =\"legend\"> Obstacle grid</span>\n      <button style = {{background: \"#FF8000\"}}> </button> <span class =\"legend\"> Explored grid</span>\n      <button style = {{background: \"#FFB266\"}}> </button> <span class =\"legend\"> Soon-to-be-explored grid</span>\n      <button style = {{background: \"#80FF00\"}}> </button> <span class =\"legend\"> Shortest-path grid</span>\n       </div>\n      {this.renderBoard()}\n      </div>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Graph/>\n    <div class=\"modal\">\n      <div class=\"modal_content\">\n        <span class=\"close\">&times;</span>\n        <p> For a quick start, click on two grids. </p>\n        <img src = {pic1} alt=\"two grids\" />\n        <p> Then, click on \"Run Pathfinding Algorithms\" and choose an algorithm you want to find the shortest path with</p>\n        <img src = {pic2} alt=\"run pathfinding algorithms\"/>\n        <p> Now you can see how the algorithms find the shortest path between two grids! </p> \n        <img src = {pic4} alt=\"shortest path\" />\n        <p> Click twice on a grid to make it an obstacle. </p>\n        <img src = {pic5} alt=\"obstacle\" />\n        <p> You can also choose to quickly build a maze, aka placing obstacles \"smartly\", from one of the maze generation algorithms by clicking on \"Generate Maze\" and choose one algorithm. </p>\n        <img src = {pic6} alt=\"maze\"  /> \n        <p> Now you can watch how our algorithm builds a maze! You can put two start/end grids on this new maze and run the pathfinding algorithm as well! </p>\n        <img src = {pic7} alt=\"maze-run\"  /> \n        <p> Finally, to reset our board, click on \"Reset board\" on the nagivation bar. </p>\n        <p> Enjoy pathfinding! </p>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}